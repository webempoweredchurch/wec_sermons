<?php
/***************************************************************
*  Copyright notice
*
*  (c) 2006 Web Empowered Church Team, Foundation For Evangelism (wec_sermons@webempoweredchurch.org)
*  All rights reserved
*
*  This script is part of the TYPO3 project. The TYPO3 project is
*  free software; you can redistribute it and/or modify
*  it under the terms of the GNU General Public License as published by
*  the Free Software Foundation; either version 2 of the License, or
*  (at your option) any later version.
*
*  The GNU General Public License can be found at
*  http://www.gnu.org/copyleft/gpl.html.
*
*  This script is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*
*  This copyright notice MUST APPEAR in all copies of the script!
***************************************************************/

require_once(PATH_tslib.'class.tslib_pibase.php');
require_once(PATH_typo3conf . 'ext/wec_api/class.tx_wecapi_list.php' );

/**
 * [CLASS/FUNCTION INDEX of SCRIPT]
 *
 *
 *
 *   75: class tx_wecsermons_pi1 extends tslib_pibase
 *   89:     function init($conf)
 *  107:     function main($content,$conf)
 *  178:     function xmlView ($content, $lConf)
 *  286:     function singleView($content,$lConf)
 *  413:     function searchView($content,$lConf)
 *  428:     function pi_list_searchbox($lConf)
 *  477:     function listView($content,$lConf)
 *  581:     function pi_list_makelist($lConf, $template)
 *  750:     function pi_list_row($lConf, $markerArray = array(), $rowTemplate, $row ='', $c = 2)
 * 1396:     function getMarkerArray( $tableName = '' )
 * 1531:     function formatStr( $str )
 * 1545:     function getTemplateKey($tableName)
 * 1588:     function getUrlToList ( $absolute )
 * 1605:     function getUrlToSingle ( $absolute, $tableName, $uid )
 * 1624:     function getFeAdminList( $tableName = '' )
 * 1644:     function getNamedTemplateContent($keyName = 'sermon', $view = 'single')
 * 1697:     function getNamedSubpart( $subpartName, $content )
 * 1714:     function loadTemplate()
 * 1740:     function getTemplateFile()
 * 1763:     function getResources( $sermonUid = '', $resourceUid = '')
 * 1822:     function emptyResourceSubparts( &$subpartArray )
 * 1854:     function throwError( $type, $message, $detail = '' )
 * 1878:     function getTutorial ( $tutorial )
 * 1956:     function uniqueCsv()
 * 1971:     function unique_array()
 * 1989:     function get_foreign_column( $currentTable, $relatedTable )
 * 2015:     function getConfigVal( &$Obj, $ffField, $ffSheet, $TSfieldname, $lConf, $default = '' )
 * 2034:     function splitTableAndUID($record)
 *
 * TOTAL FUNCTIONS: 28
 * (This index is automatically created/updated by the extension "extdeveval")
 *
 */

/**
 * Plugin 'Sermon Repository' for the 'wec_sermons' extension.
 *
 * @author	Web Empowered Church Team, Foundation For Evangelism <wec_sermons@webempoweredchurch.org>
 * @package TYPO3
 * @subpackage tx_wecsermons
 */
 class tx_wecsermons_pi1 extends tslib_pibase {
	var $prefixId = 'tx_wecsermons_pi1';		// Same as class name
	var $scriptRelPath = 'pi1/class.tx_wecsermons_pi1.php';	// Path to this script relative to the extension dir.
	var $extKey = 'wec_sermons';	// The extension key.
	var $pi_checkCHash = TRUE;
	var $template = null;


	/**
	 * init: performs some initialization of our class
	 *
	 * @param	array		$conf: Configuration array from TypoScript
	 * @return	void
	 */
	function init($conf)	{
		$this->conf=$conf;		// Setting the TypoScript passed to this function in $this->conf
		$this->pi_initPIflexForm(); // Init FlexForm configuration for plugin
		$this->pi_setPiVarDefaults(); // Set default piVars from TS
		$this->pi_loadLL();		// Loading the LOCAL_LANG values
			//	TODO: Determine if we need a layout code logic block or not
		$this->internal['layoutCode'] = getConfigVal( $this, 'layout', 'sDEF', 'layoutCode', $lConf, 1 );	//	Set layoutCode into internal storage
// ( $this->internal['layoutCode'] );
	}

	/**
	 * Main: Primary sermons function.
	 * This function determines which view to display, branching to retreive content for each view.
	 *
	 * @param	string		$content: Any previous content that this class will append itself to.
	 * @param	array		$conf: Configuration array from TypoScript
	 * @return	string		Complete, processed content generated by the wec_sermons plugin
	 */
	function main($content,$conf)	{

		$this->local_cObj = t3lib_div::makeInstance('tslib_cObj'); // Local cObj.
		$this->init($conf);

		//	Check if typoscript config 'tutorial' is an integer, otherwise set to 0
		if( t3lib_div::testInt( $this->conf['tutorial'] ) == false ) $this->conf['tutorial'] = 0;

		$tutorial = getConfigVal( $this, 'tutorial', 'sMisc', 'tutorial', $this->conf, 0 );

		//	If tutorial enabled, walk through tutorial
		if( $tutorial )
			return $this->getTutorial( $tutorial );

		//	Get the 'what to display' value from plugin or typoscript, plugin overriding
		$display = getConfigVal( $this, 'display', 'sDEF', 'CMD', $this->conf );

		//	Check codes for 'xml', and if found then we only display the RSS and nothing else.
		//	The XML output can not be displayed along with any other view.
		$display = strpos( $display, 'xml' ) ? 'xml' : $display;

		//	Check codes for 'list', and if showing only a single record, set codes to a single 'list' code only.
		$display = strpos( $display,'list') && $this->piVars['showUid'] ? 'list' : $display;

		$codes = $this->internal['codes'] = t3lib_div::trimExplode(',',$display,0);

		foreach( $codes as $code ) {
			switch( $code ) {	//	Primary switch for this plugin
				case 'SINGLE':
					$this->internal['currentCode'] = 'SINGLE';
					$content .= $this->singleView( $content, $this->conf['singleView.'] );
					break;

				case 'LIST':
					$this->internal['currentCode'] = 'LIST';
					$content .= $this->listView($content, $this->conf['listView.']);
					break;

				case 'XML':
					$this->internal['currentCode'] = 'XML';
					$content .= $this->xmlView($content, $this->conf['xmlView.']);
					break;

/*	Currently unused feature, kept for future use

				case 'ARCHIVE':
					$this->internal['currentCode'] = 'ARCHIVE';
					$content .= '<h1>archive case reached</h1><br/>';
					break;
*/
				case 'SEARCH':
					$this->internal['currentCode'] = 'SEARCH';
					$content .= $this->searchView( $content, $this->conf['searchView.'] );
					break;

				default:
					$content .= $this->throwError( 
						'Configuration Error', 
						'Plugin setting "What to Display" was not specified, or TypoScript Setup property "CMD" was incorrect or not found.', 
						'What to Display:' . $this->pi_getFFvalue($this->cObj->data['pi_flexform'], 'display', 'sDEF')
					);
					break;
			}	//	End Primary switch

		}	//	End Primary foreach loop

		return $content;

	}

	/**
	 * xmlView: This function will output a list view of sermons in XML format.
	 *
	 * @param	string		$content: Any previous content that this function will append itself to.
	 * @param	array		$lConf: Locally scoped configuration array from TypoScript for xmlView
	 * @return	string		Complete XML content
	 */
	function xmlView ($content, $lConf) {

		//	Recursive setting from plugin overrides typoscript
		$this->conf['recursive'] = getConfigVal( $this, 'recursive', 'sDEF', 'recursive', $this->conf, 0 );

			//	Find the starting point in the page tree to search for the record, use current page as default
		$startingPoint = getConfigVal($this, 'startingpoint', 'sDEF', 'startingpoint', $lConf, $GLOBALS['TSFE']->id );

		//	If configured to use the General Storage Folder of the site, include that in the list of pids
		if( $this->conf['useStoragePid'] ) {

			//	Retrieve the general storage pid for this site
			$rootPids = $GLOBALS['TSFE']->getStorageSiterootPids();
			$storagePid = (string) $rootPids['_STORAGE_PID'];

				//	Merge all lists from typoscript, storagePid, and startingpoint specified at plugin and assign to pidList
			$this->conf['pidList'] .= ','. $storagePid . ','. $startingPoint;
		}
		else 	//	Merge lists from typoscript and startingpoint specified at plugin into pidList
			$this->conf['pidList'] .= ','. $startingPoint;

			//	Retrieve the number we want to limit our items to
		$this->piVars['pointer']=0;
		$this->internal['results_at_a_time'] = $lConf['results_at_a_time'];
		$this->internal['descFlag'] = $lConf['descFlag'];

			//	TODO: Modify code to allow other records to be shown. Right now we're assuming sermons only.

			//	Get the related table entries to the group, using 'tx_wecsermons_sermons' if none specified
		$tableToList = getConfigVal( $this, 'detail_table', 'slistView', 'detail_table', $lConf, 'tx_wecsermons_sermons' );

			//	Load the correct marker array and load the item template
		$markerArray = $this->getMarkerArray( $tableToList );

			//	TODO: Modify the date selection to include other tables and date fields

			//	If start or end date was set, then add this to the query WHERE clause.
		$startDate = getConfigVal( $this, 'startDate', 'slistView', 'startDate', $lConf );
		$endDate = getConfigVal( $this, 'endDate', 'slistView', 'endDate', $lConf );
		$where = '';
		$where .= $startDate ? ' AND occurance_date >= ' . $startDate : '';
		$where .= $endDate ? ' AND occurance_date <= ' .  $endDate  : '';

			// Make listing query, pass query to SQL database:
		$res = $this->pi_exec_query($tableToList,0,$where);

		$sermons = array();
		$content = '';

			//	Iterate over the matching sermons.
			//	Retrieve related resource information and update the data row
			//	Retrieve the first speaker and update data row
		while( $row = $GLOBALS['TYPO3_DB']->sql_fetch_assoc( $res ) ) {

			//	Retreive the array of related resources to this sermon record
			$resources = $this->getResources( $row['uid'] );

			foreach( $resources as $resource ) {

					//	If the resource is the type allowed as an enclosure in this view, then calculate the url and size.
				if( $resource['type'] == $lConf['enclosureType'] ) {

						//	Retrieve a typolink conf that tells us how to render the link to the resource. Must be provided by admin!
					$this->local_cObj->start($resource);
					$typolinkConf = $this->conf['resource_types.'][$resource['type'].'.']['typolink.'];

						//	Render the relative and absolute paths to the file
					$relPath =  $this->local_cObj->typolink_URL( $typolinkConf );
					$absPath = PATH_site . $relPath;

						//	Retrieve file info for the file.
					$fileInfo = t3lib_basicFileFunctions::getTotalFileInfo( $absPath );

					$row['size'] = $fileInfo['size'];
					$row['enclosure_url'] =  t3lib_div::getIndpEnv('TYPO3_SITE_URL'). $relPath;
					$row['mime_type'] = $resource['mime_type'];
				}

			}
			$row['item_link'] = t3lib_div::getIndpEnv('TYPO3_SITE_URL'). $this->pi_linkTP_keepPIvars_url( array( 'showUid' => $row['uid'], 'recordType' => $tableToList), 1 );

			if( $row['speakers_uid'] ) {

				//	Query for related speakers
				$speakerRes = $this->pi_exec_query('tx_wecsermons_speakers', 0, ' AND uid in (' . $row['speakers_uid'] . ')' );

				//	Retreive only the first speaker
				$speaker = $GLOBALS['TYPO3_DB']->sql_fetch_assoc( $speakerRes );
				$row['author'] = $speaker ? $speaker['firstname'] . ' ' . $speaker['lastname'] : '';

			}
			$sermons[] = $row;
		}


		 return tx_wecapi_list::getContent( $this, $sermons, $tableToList );

	}

	/**
	 * singleView: Generates the SINGLE view of a sermon record.
	 *
	 * 	Assumes that $this->internal['currentTable'] and $this->internal['currentRow'] are already populated
	 *
	 * @param	string		$content: Any previous content that this function will append itself to.
	 * @param	array		$lConf: Locally scoped configuration array from TypoScript for a single view
	 * @return	string		Complete single view content
	 */
	function singleView($content,$lConf)	{
		$this->pi_loadLL();

			// This sets the title of the page for use in indexed search results:
		if ($this->internal['currentRow']['title'])	$GLOBALS['TSFE']->indexedDocTitle=$this->internal['currentRow']['title'];


			//	Recursive setting from plugin overrides typoscript
		$this->conf['recursive'] = getConfigVal( $this, 'recursive', 'sDEF', 'recursive', $lConf, 0 );

			//	Find the starting point in the page tree to search for the record, use current page as default
		$startingPoint = getConfigVal($this, 'startingpoint', 'sDEF', 'startingpoint', $lConf, $GLOBALS['TSFE']->id );

			//	If configured to use the General Storage Folder of the site, include that in the list of pids
		if( $this->conf['useStoragePid'] ) {

			//	Retrieve the general storage pid for this site
			$rootPids = $GLOBALS['TSFE']->getStorageSiterootPids();
			$storagePid = (string) $rootPids['_STORAGE_PID'];

				//	Merge all lists from typoscript, storagePid, and startingpoint specified at plugin and assign to pidList
			$this->conf['pidList'] .= ','. $storagePid . ','. $startingPoint;
		}
		else 	//	Merge lists from typoscript and startingpoint specified at plugin into pidList
			$this->conf['pidList'] .= ','. $startingPoint;

		$this->internal['currentTable'] = $this->piVars['recordType'];

		//	Check if table is in allowedTables
		if( ! t3lib_div::inList( $this->conf['allowedTables'], $this->internal['currentTable']  ) ) {

			$error = array();
			$error['type'] = htmlspecialchars( 'WEC Sermons Error!' );
			$error['message'] = htmlspecialchars( ' Row from requested table was not listed in the "allowedTables" typoscript configuration.' );
			$error['detail'] = htmlspecialchars( 'Requested Table: ' . $this->internal['currentTable']  . '. allowedTables: ' . $this->conf['allowedTables'] );

			return sprintf( '<p>%s<br/> %s</p>
			<p>%s</p>
			', $error['type'], $error['message'], $error['detail'] );

		}

		//	Check if showUid is an int
		if( ! t3lib_div::testInt( $this->piVars['showUid'] ) ) {

			$error = array();
			$error['type'] = htmlspecialchars( 'WEC Sermons Error!' );
			$error['message'] = htmlspecialchars( ' UID for requested resource was not valid.' );
			$error['detail'] = htmlspecialchars( 'Requested UID: ' . $this->piVars['showUid'] );

			return sprintf( '<p>%s<br/> %s</p>
			<p>%s</p>
			', $error['type'], $error['message'], $error['detail'] );

		}

			//	Retrieve the template key, which is the translation between the real table name and the template naming.
			//	Branch between resource templates and other templates
		if( $this->internal['currentTable'] == 'tx_wecsermons_resources' ) {

				//	TODO: allow specification of what record to draw from TypoScript
			$resource = $this->getResources( '' , $this->piVars['showUid'] ) ;
			$this->internal['currentRow'] = $resource[0];

			//	If resource is of type 'plugin', we load the template from the resource record, otherwise load the template from the resource_type record.
			$templateName = $this->internal['currentRow']['type'] == 'plugin' ?
				$this->internal['currentRow']['resource_template_name']
				: $this->internal['currentRow']['resource_type_template_name'];

			$this->loadTemplate();
			$this->template['single'] = $this->getNamedSubpart( $templateName, $this->template['total'] );

		}
		else {
			$templateKey = $this->getTemplateKey( $this->internal['currentTable'] );
			$this->template['single'] = $this->getNamedTemplateContent( $templateKey );

				//	TODO: allow specification of what record to draw from TypoScript
			$this->internal['currentRow'] = $this->pi_getRecord($this->piVars['recordType'],$this->piVars['showUid']);
		}

			//	Report an error if we couldn't pull up the template.
		if(! $this->template['single'] ) {

				return $this->throwError( 
					'WEC Sermons Error!',
					'Unable to retrieve content for specified template.',
					sprintf (
						'Requested Template: ###TEMPLATE_%s_%s%s###',
						strtoupper( $templateKey ),
						'SINGLE',
						$this->internal['layoutCode']
					)
				 );

				return sprintf(
					'<p>%s<br/> %s</p>	<p>%s</p>',
					$error['type'],
					$error['message'],
					$error['detail']
				);
		}

		$this->template['content'] = $this->cObj->getSubpart( $this->template['single'], '###CONTENT###' );

			//	Retrieve the markerArray for the right table
		$markerArray = $this->getMarkerArray( $this->internal['currentTable'] );

			//	Process row
		$content .= $this->cObj->substituteSubpart( $this->template['single'], '###CONTENT###', $this->pi_list_row($lConf, $markerArray, $this->template['content'], $this->internal['currentRow'] ) );

			//	Parse for additional markers. Browse results, etc.
		$markerArray = $this->getMarkerArray();

			//	Call pi_list_row to substitute last markers and return results
		return $this->pi_list_row( $lConf, $markerArray, $content );

	}

	/**
	 * searchView: Generates the SEARCH view of the SMS
	 *
	 * @param	string		$content: Any previous content that this function will append itself to.
	 * @param	array		$lConf: Locally scoped configuration array from TypoScript for search view
	 * @return	string		Complete search view content
	 */
	function searchView($content,$lConf)	{

		return "\n\n".$this->pi_list_searchbox($lConf);


	}

	/**
	 * pi_list_searchbox: Generates a searchbox using a marker based template.
	 *
	 * 		Template subpart should be named ###SEARCHBOX<integer>###, where the integer is the 'Layout' option chosen from the fe plugin.
	 *
	 * @param	array		$lConf: Locally scoped configuration array from TypoScript for search view
	 * @return	string		Complete search view content
	 */
	function pi_list_searchbox($lConf) {

		//	Retrieve searchbox template
		$searchBoxTemplate = $this->getNamedTemplateContent( 'searchbox', '' );

		//	Retrieve the marker array
		$markerArray = $this->getMarkerArray('searchbox');

		$markerArray['###SEARCH_BUTTON_NAME###'] = $this->pi_getLL('pi_list_searchBox_search');

			//	Find the PID that we should post form data to
		$pid = getConfigVal( $this, '', '', 'pidSearchView', $this->conf, $GLOBALS['TSFE']->id );

		$markerArray['###FORM_ACTION###'] = $this->cObj->typolink_URL( array( 'parameter' => $pid ) );


/*	This commented section will enable us to perform deeper searches in the future by searching through multiple tables.

		$tables = t3lib_div::trimExplode( ',', $lConf['searchTables'], 1 );

		$selectContent ='';
		foreach( $tables as $tableName ) {

			//	Grab the tablename from locallang_db
			$llName = $GLOBALS['TSFE']->sL('LLL:EXT:wec_sermons/locallang_db.php:'.$tableName);
			$option = "\n<option value=\"" . $tableName . '">'. $llName. "</option>";
			$selectContent .= $option;
		}

		$markerArray['###SEARCHBOX_OPTIONS###'] = $this->cObj->stdWrap(
			$selectContent,
			array(
				'wrap' => "\n<select class=\"".$this->pi_getClassName('searchbox-select')."\" name=\"tx_wecsermons_pi1[sword_table]\">|\n</select>"
			)
		);
*/

		return $this->cObj->substituteMarkerArrayCached( $searchBoxTemplate, $markerArray );

	}


	/**
	 * listView: Generates the LIST view of the SMS
	 *
	 * @param	string		$content: Any previous content that this function will append itself to.
	 * @param	array		$lConf: Locally scoped configuration array from TypoScript for list view
	 * @return	string		Complete list view content
	 */
	function listView($content,$lConf)	{

			//	Recursive setting from plugin overrides typoscript
		$this->conf['recursive'] = getConfigVal( $this, 'recursive', 'sDEF', 'recursive', $lConf, 0 );

			//	Find the starting point in the page tree to search for the record, use current page as default
		$startingPoint = getConfigVal($this, 'startingpoint', 'sDEF', 'startingpoint', $lConf, $GLOBALS['TSFE']->id );
debug( $startingPoint );
			//	If configured to use the General Storage Folder of the site, include that in the list of pids
		if( $this->conf['useStoragePid'] ) {

			//	Retrieve the general storage pid for this site
			$rootPids = $GLOBALS['TSFE']->getStorageSiterootPids();
			$storagePid = (string) $rootPids['_STORAGE_PID'];

				//	Merge all lists from typoscript, storagePid, and startingpoint specified at plugin and assign to pidList
			$this->conf['pidList'] .= ','. $storagePid . ','. $startingPoint;

		}
		else 	//	Merge lists from typoscript and startingpoint specified at plugin into pidList
			$this->conf['pidList'] .= ','. $startingPoint;

			// If a single element should be displayed, jump to single view
		if ($this->piVars['showUid'])	{

			return $this->singleView($content,$this->conf['singleView.']);

		} else {	//	Otherwise continue with list view

				//	Intialize query params if not set
			if (!isset($this->piVars['pointer']))	$this->piVars['pointer']=0;
			if( !isset( $this->piVars['recordType'] ) ) $this->piVars['recordType'] = getConfigVal( $this, 'detail_table', 'slistView', 'detail_table', $lConf, 'tx_wecsermons_sermons' );

				// Initialize some query parameters, and internal variables
			list($this->internal['orderBy'],$this->internal['descFlag']) = explode(':',$this->piVars['sort']);
			$this->internal['results_at_a_time']=t3lib_div::intInRange($lConf['results_at_a_time'],0,1000,20);		// Number of results to show in a listing.
			$this->internal['maxPages']=t3lib_div::intInRange($lConf['maxPages'],0,1000,5);;		// The maximum number of "pages" in the browse-box: "Page 1", "Page 2", etc.
			$this->internal['dontLinkActivePage']=$lConf['dontLinkActivePage'];
			$this->internal['showFirstLast']=$lConf['showFirstLast'];
			$this->internal['pagefloat']=$lConf['pagefloat'];
			$this->internal['showRange']=$lConf['showRange'];

			$this->internal['orderByList']=$lConf[$this->piVars['recordType'].'.']['orderByList'];
			$this->internal['orderBy']=$lConf[$this->piVars['recordType'].'.']['orderBy'];
			$this->internal['descFlag']=$lConf[$this->piVars['recordType'].'.']['descFlag'];

/*	This commented section will enable us to search through multiple tables to perform deeper searches in the future

				//	Check if selected table is in list of allowed tables, throw error if necessary
			if($this->piVars['sword_table'] && ! t3lib_div::inList( $this->conf['searchView.']['searchTables'], trim( $this->piVars['sword_table'] ) ) ) {
				return $this->throwError(
					'WEC Sermons Error',
					"The table name '" . $this->piVars['sword_table'] . "' was not in the allowed list of tables: '" . $this->conf['searchView.']['searchTables'],
					"Please check the TypoScript configuration for the setting of 'searchView.searchTables'"
				);
			}
*/

			$this->internal['sword_table'] = 'tx_wecsermons_sermons';	//	Migrate to $this->piVars['sword_table'] in future
			$this->internal['searchFieldList']=$this->conf['searchView.']['searchFieldArray.'][$this->internal['sword_table'].'.']['searchFieldList'];


				//	Load the template file. By default, this populates the $this->template array with the list template from ###TEMPLATE_LIST{layoutCode}###
			$this->loadTemplate();

				//	Report an error if we couldn't pull up the template.
			if(! $this->template['list'] ) {

				return $this->throwError( 
					'WEC Sermons Error!',
					'Unable to retrieve content for specified template.',
					sprintf (
							'Requested Template: ###TEMPLATE_LIST%s###
							
							Template File: %s
							',
							$this->internal['layoutCode'],
							$this->conf['templateFile']
						)
					 );

			}

			$content = $this->cObj->substituteSubpart( $this->template['list'], '###CONTENT###', $this->pi_list_makelist($lConf, $this->template['content'] ) );

				//	Parse for additional markers. Browse results, etc.
			$markerArray = $this->getMarkerArray();

				//	Call pi_list_row to substitute last markers and return results
			return $this->pi_list_row( $lConf, $markerArray, $content );
		}
	}

	/**
	 * pi_list_makelist: Returns the list of items based on the input SQL result pointer
	 * For each result row the internal var, $this->internal['currentRow'], is set with the row returned.
	 *
	 * @param	pointer		Result pointer to a SQL result which can be traversed.
	 * @param	string		Marker based template, which will be processed and returned with populated data using $this->substituteMarkerArrayCached  ()
	 * @return	string		Output HTML, wrapped in <div>-tags with a class attribute
	 */
	function pi_list_makelist($lConf, $template)	 {

			//	 Gather all our output into $content
		$content = '';
		$subpartArray = array();
		$groupTable = getConfigVal( $this, 'group_table', 'slistView', 'group_table', $lConf );

			//	If grouping was specified, branch to process group list
		if( $groupTable ) {

			$detailTable = getConfigVal( $this, 'detail_table', 'slistView', 'detail_table', $lConf );
			$this->template['group'] = $this->cObj->getSubpart( $template, '###GROUP###' );

				//Run a series of checks before branching to grouping logic, return error if necessary
			if( $groupTable == '' || ! $this->template['group'] ) {

				$error = array();
				$error['type'] = htmlspecialchars( 'WEC Sermons Error!' );
				$error['message'] = htmlspecialchars( ' "group_table" option was specified, but no ###GROUP### tag was found in the template.' );
				$error['detail'] = htmlspecialchars( 'Template file: ' . $this->internal['templateFile'] );

				$format =  sprintf( '<p>%s<br/> %s</p>
				<p>%s</p>
				', $error['type'], $error['message'], $error['detail'] );

				return $format;
			}
				//	Check if group_table is in list of allowed tables
			if( ! t3lib_div::inList( $this->conf['allowedTables'], $groupTable ) ) {

				$error = array();
				$error['type'] = htmlspecialchars( 'WEC Sermons Error!' );
				$error['message'] = htmlspecialchars( 'Table specified in "group_table" option is not in the list of allowed tables option, ".allowedTables"' );
				$error['detail'] = '';

				$format =  sprintf( '<p>%s<br/> %s</p>
				<p>%s</p>
				', $error['type'], $error['message'], $error['detail'] );

				return $format;

			}

			if( ! t3lib_div::inList( $this->conf['allowedTables'], $detailTable ) ) {

				$error = array();
				$error['type'] = htmlspecialchars( 'WEC Sermons Error!' );
				$error['message'] = htmlspecialchars( 'Table specified in "detail_table" option is not in the list of allowed tables option, ".allowedTables"' );
				$error['detail'] = '';

				$format =  sprintf( '<p>%s<br/> %s</p>
				<p>%s</p>
				', $error['type'], $error['message'], $error['detail'] );

				return $format;

			}

			$markerArray = $this->getMarkerArray( $groupTable );
			$groupTemplate = $this->template['group'];
			$groupContent = '';

			$this->internal['currentTable'] = $this->internal['groupTable'] = $groupTable;
			$res = $this->pi_exec_query($groupTable);

				//	Search TCA for relation to previous table where columns.[colName].config.foreign_table = $this->internal['groupTable']
			$foreign_column = get_foreign_column( $detailTable, $this->internal['groupTable'] );
			if( ! $foreign_column ) {
				$error = array();
				$error['type'] = htmlspecialchars( 'WEC Sermons Error!' );
				$error['message'] = htmlspecialchars( 'Grouping tag, "###GROUP###" was found in template, but was not related to "' . $groupTable . '"' );
				$error['detail'] = '';

				$format =  sprintf( '<p>%s<br/> %s</p><p>%s</p>',
					$error['type'],
					$error['message'],
					$error['detail']
				);

				return $format;
				return '<p>WEC Sermons Error!<br/> Grouping tag, &quot;###GROUP###&quot; was found in template, but was not related to &quot;detail_table&quot;</p>';
			}
				//	Retreive marker array and template for the detail table
			$detailMarkArray = $this->getMarkerArray( $detailTable );
			$detailTemplate = $this->template['item'] = $this->getNamedSubpart( 'DETAIL', $template );

				//	Iterate every record in groupTable
			while( $this->internal['currentRow'] = $GLOBALS['TYPO3_DB']->sql_fetch_assoc( $res ) ) {

					//	Process the current row
				$groupContent .= $this->pi_list_row( $lConf, $markerArray, $groupTemplate, $this->internal['currentRow'] );

					//	Store previous row and table as we switch to retreiving detail
				$this->internal['previousRow'] = $this->internal['currentRow'];
				$this->internal['previousTable'] = $this->internal['currentTable'];

				$this->internal['currentTable'] = $detailTable;

					//	Exec query on detail table, for every record related to our group record
				$detailRes = $this->pi_exec_query( $detailTable, 0, ' AND ' . $foreign_column . ' in (' . $this->internal['previousRow']['uid'] . ')' );

				$detailCount = 0;
				while( $this->internal['currentRow'] = $GLOBALS['TYPO3_DB']->sql_fetch_assoc( $detailRes ) ) {
					$groupContent .= $this->pi_list_row( $lConf, $detailMarkArray, $detailTemplate, $this->internal['currentRow'] );
					$detailCount++;
				}

				//	Restore row and table to internal storage
				$this->internal['currentRow'] = $this->internal['previousRow'];
				$this->internal['currentTable'] = $this->internal['previousTable'];

					//	Aggregate groupContent into content if detail records exist.
				if( $detailCount > 0 )
					$content .= $groupContent;

				$groupContent = '';
			}

		}	//	End if group
		else {	//	No group found, just provide a straight list

				//	Get the related table entries to the group, using 'tx_wecsermons_sermons' if none specified
			$tableToList = getConfigVal( $this, 'detail_table', 'slistView', 'detail_table', $lConf, 'tx_wecsermons_sermons' );

				//	Load the correct marker array and load the item template
			$markerArray = $this->getMarkerArray( $tableToList );
			$itemTemplate = $this->cObj->getSubpart( $template, '###ITEM###' );
			$this->internal['currentTable'] = $this->internal['groupTable'] = 'tx_wecsermons_series';

				//	TODO: Modify the date selection to include other tables and date fields

				//	If start or end date was set, then add this to the query WHERE clause.
			$startDate = getConfigVal( $this, 'startDate', 'slistView', 'startDate', $lConf );
			$endDate = getConfigVal( $this, 'endDate', 'slistView', 'endDate', $lConf );
			$where = '';
			$where .= $startDate ? ' AND occurance_date >= ' . $startDate : '';	//	$GLOBALS['TYPO3_DB']->fullQuoteStr( strftime( '%m-%d-%y', $startDate ), $tableToList ) : '';
			$where .= $endDate ? ' AND occurance_date <= ' .  $endDate  : '';

				// Get number of records:
			$res = $this->pi_exec_query($tableToList,1, $where);
			list($this->internal['res_count']) = $GLOBALS['TYPO3_DB']->sql_fetch_row($res);

				// Make listing query, pass query to SQL database:
			$res = $this->pi_exec_query($tableToList,0,$where);

			$count = 1;
			while( $this->internal['currentRow'] = $GLOBALS['TYPO3_DB']->sql_fetch_assoc( $res ) ) {
				$content .= $this->pi_list_row( $lConf, $markerArray, $itemTemplate, $this->internal['currentRow'], $count );
				$count++;
			}

		}

		return $content;
	}

	/**
	 * pi_list_row: This function passes one row of data through a marker based template, making the appropriate substitutions, and returns the finished content.
	 * 	This function is the crux of the plugin. Using an array of markers, it performs all the appropriate substitutions, matching up data fields to markers.
	 *
	 * 	Implements a hook for processing additional markers. tx_wecsermons_pi1->processMarker
	 *
	 * @param	array		$lConf: Locally scoped TypoScript configuration
	 * @param	array		$markerArray: Array of typo3 tag markers as keys, and matching fieldnames as values. I.E. array( '###SERMON_TITLE###' => 'title', ... )
	 * @param	string		$rowTemplate: A marker based template that defines the layout of our data on the front end
	 * @param	array		$row: An associative array representing a row of data, with fieldnames as array keys and field values as array values. I.E. array( 'title' => 'Jesus Who Performs Miracles', ... )
	 * @param	integer		$c: Number of current row, to determine even / odd rows
	 * @return	string		A completed template subpart, populated with data from the row
	 */
	function pi_list_row($lConf, $markerArray = array(), $rowTemplate, $row ='', $c = 2)	{
		$wrappedSubpartArray = array();
		$subpartArray = array();

			//	Using passed markerArray, process each key and insert field content
			//	The reason we are have this looping structure is for future off-loading of this logic
		foreach( $markerArray as $key => $value ) {

				$fieldName = $value;
				$markerArray[$key] = '';

				switch( $key ) {

				case '###SERMON_TITLE###':
					if( $row[$fieldName] ) {
						$this->local_cObj->start( $row, 'tx_wecsermons_sermons' );
						$markerArray[$key] = $this->local_cObj->cObjGetSingle( $lConf['tx_wecsermons_sermons.']['title'], $lConf['tx_wecsermons_sermons.']['title.'] );


					}
				break;

				case '###SERMON_OCCURANCE_DATE###':
					if( $row[$fieldName] )
					{
							//	Wrap the date, choosing from one of three settings in typoscript
						$dateWrap = $lConf['tx_wecsermons_sermons.']['occurance_date.'] ? $lConf['tx_wecsermons_sermons.']['occurance_date.'] : $lConf['general_dateWrap.'];
						if( ! $dateWrap ) $dateWrap = $this->conf['general_dateWrap.'];

						$this->local_cObj->start( $row, 'tx_wecsermons_sermons' );
						$markerArray[$key] = $this->local_cObj->cObjGetSingle( $lConf['tx_wecsermons_sermons.']['occurance_date'], $dateWrap);
					}
				break;

				case '###SERMON_DESCRIPTION###':
					if( $row[$fieldName] ) {
						$this->local_cObj->start( $row, 'tx_wecsermons_sermons' );
						$markerArray[$key] = $this->local_cObj->cObjGetSingle( $lConf['tx_wecsermons_sermons.']['description'], $lConf['tx_wecsermons_sermons.']['description.'] );
					}
				break;

				case '###SERMON_SCRIPTURE###':
					if( $row[$fieldName] ) {
						$this->local_cObj->start( $row, 'tx_wecsermons_sermons' );
						$markerArray[$key] =  $this->local_cObj->cObjGetSingle( $lConf['tx_wecsermons_sermons.']['scripture'], $lConf['tx_wecsermons_sermons.']['scripture.'] );
					}
				break;

				case '###SERMON_GRAPHIC###':
					if( $row[$fieldName] ) {

						$this->local_cObj->start( $row, 'tx_wecsermons_sermons' );
						$markerArray[$key] = $this->local_cObj->cObjGetSingle( $lConf['tx_wecsermons_sermons.']['graphic'], $lConf['tx_wecsermons_sermons.']['graphic.']);
					}
					break;


				case '###SERMON_LINK###':
					$wrappedSubpartArray[$key] = explode(
						'|',
						$this->pi_list_linkSingle(
							'|',
							$row['uid'],
							$this->conf['allowCaching'],
							array(
								'recordType' => 'tx_wecsermons_sermons',
							),
							FALSE,
							$this->conf['pidSingleView'] ? $this->conf['pidSingleView']:0
							)
					);
				break;

				case '###SERMON_SERIES###':

					$subpartArray[$key] = '';
					if( $row[$fieldName] ) {

						$seriesTemplate = $this->cObj->getSubpart( $rowTemplate, $key );
						$seriesMarkerArray = $this->getMarkerArray('tx_wecsermons_series');
						$seriesContent = '';

							//	Store the current table and row while we switch to another table for a moment
						$this->internal['previousTable'] = $this->internal['currentTable'];
						$this->internal['currentTable'] = 'tx_wecsermons_series';
						$this->internal['previousRow'] = $this->internal['currentRow'];

						$seriesRes = $GLOBALS['TYPO3_DB']->exec_SELECTquery(
							'tx_wecsermons_series.*',
							'tx_wecsermons_series',
							' uid in (' . $row[$fieldName] . ')' . $this->cObj->enableFields( 'tx_wecsermons_series' )
						);


						$count = 0;
						while( $this->internal['currentRow'] = $GLOBALS['TYPO3_DB']->sql_fetch_assoc( $seriesRes ) ) {
								//	Recursive call to $this->pi_list_row() to populate each series marker
							$seriesContent .= $this->pi_list_row( $lConf, $seriesMarkerArray, $seriesTemplate, $this->internal['currentRow'] );
							$count++;
						}

						//	Restore the preview table and row
					$this->internal['currentTable'] = $this->internal['previousTable'];
					$this->internal['currentRow'] = $this->internal['previousRow'];

					//	Replace marker content with subpart, wrapping stdWrap
						if( $count > 0 )
							$subpartArray[$key] = $this->cObj->stdWrap( $seriesContent, $lConf['tx_wecsermons_sermons.']['series.'] );

					}

				break;

				case '###SERMON_SPEAKERS###':

					$subpartArray[$key] = '';
					if( $row[$fieldName] ) {

							//	Get the speakers subpart
						$speakerTemplate = $this->cObj->getSubpart( $rowTemplate, $key );
						$speakerMarkerArray = $this->getMarkerArray('tx_wecsermons_speakers');
						$speakerContent = '';

							//	Store the current table and row while we switch to another table for a moment
						$this->internal['previousTable'] = $this->internal['currentTable'];
						$this->internal['currentTable'] = 'tx_wecsermons_speakers';
						$this->internal['previousRow'] = $this->internal['currentRow'];

							//	Retrieve all speaker records that are related to this sermon
						$speakerRes = $GLOBALS['TYPO3_DB']->exec_SELECTquery(
							'tx_wecsermons_speakers.*',
							'tx_wecsermons_speakers',
							' uid in (' . $row[$fieldName] . ')' . $this->cObj->enableFields( 'tx_wecsermons_speakers' )
						);

						$count = 0;
						while( $this->internal['currentRow'] = $GLOBALS['TYPO3_DB']->sql_fetch_assoc( $speakerRes ) ) {

								//	Recursive call to $this->pi_list_row() to populate each speaker marker
							$speakerContent .= $this->pi_list_row( $lConf, $speakerMarkerArray, $speakerTemplate, $this->internal['currentRow'] );
							$count++;
						}

							//	Restore the preview table and row
						$this->internal['currentTable'] = $this->internal['previousTable'];
						$this->internal['currentRow'] = $this->internal['previousRow'];

							//	Replace marker content with subpart, wrapping stdWrap
						if( $count > 0 )
							$subpartArray[$key] = $this->cObj->stdWrap( $speakerContent, $lConf['tx_wecsermons_sermons.']['speakers.'] );

					}
				break;

				case '###SERMON_TOPICS###':

					$subpartArray[$key] = '';

					if( $row[$fieldName] ) {

							//	Load the topics subpart
						$topicTemplate = $this->cObj->getSubpart( $rowTemplate, $key );
						$topicMarkerArray = $this->getMarkerArray('tx_wecsermons_topics');
						$topicContent = '';

							//	Store the current table and row while we switch to another table for a moment
						$this->internal['previousTable'] = $this->internal['currentTable'];
						$this->internal['currentTable'] = 'tx_wecsermons_topics';
						$this->internal['previousRow'] = $this->internal['currentRow'];

						$topicRes = $GLOBALS['TYPO3_DB']->exec_SELECTquery(
							'tx_wecsermons_topics.*',
							'tx_wecsermons_topics',
							' uid in (' . $row[$fieldName] . ')' . $this->cObj->enableFields( 'tx_wecsermons_topics' )
						);

						$count = 0;
						while( $this->internal['currentRow'] = $GLOBALS['TYPO3_DB']->sql_fetch_assoc( $topicRes ) ) {

								//	Recursive call to $this->pi_list_row() to populate each topic marker
							$topicContent .= $this->pi_list_row( $lConf, $topicMarkerArray, $topicTemplate, $this->internal['currentRow'] );
							$count++;
						}

							//	Restore the preview table and row
						$this->internal['currentTable'] = $this->internal['previousTable'];
						$this->internal['currentRow'] = $this->internal['previousRow'];

							//	Replace marker content with subpart
						if( $count > 0 )
							$subpartArray[$key] = $this->cObj->stdWrap( $topicContent, $lConf['tx_wecsermons_sermons.']['topics.'] );

					}

				break;

				case '###SERMON_RESOURCES###':

					$marker = '';
					$markerArray[$key] = '';

						//	Find all the possible markers and set to empty string.
					$this->emptyResourceSubparts( $subpartArray );

					if( $row[$fieldName] ) {

			 			$wrap = array (
			 				'wrap' => '###|###'
			 			);

						$resourceMarkerArray = $this->getMarkerArray('tx_wecsermons_resources');

							//	Store the current table and row while we switch to another table for a moment
						$this->internal['previousTable'] = $this->internal['currentTable'];
						$this->internal['currentTable'] = 'tx_wecsermons_resources';
						$this->internal['previousRow'] = $this->internal['currentRow'];


							//	Retrieve related resources to this sermon
						$resources = $this->getResources( $row['uid'] );

						foreach( $resources as $resource ) {

							$this->internal['currentRow'] = $resource;
							$this->local_cObj->start( $this->internal['currentRow'] );

							//	If resource type = 'plugin', then process differently
							if( $this->internal['currentRow']['type']  == 'plugin') {

									//	Overwrite the resource type field with the resource title. This allows us to pass through to the CASE object which will use the 'title' to determine the custom rendering for this specific resource.
								$this->internal['currentRow']['type'] = $this->internal['currentRow']['title'];

									//	Parse the table_uid string from record into the value for the querystring_param
								list(,$queryStringVal) = array_values( splitTableAndUID($this->internal['currentRow']['rendered_record'] ) );

									//	Break apart our querystring_param from it's stored form of 'plugin[param]'
								$queryString = split( "\[|\]", $this->internal['currentRow']['querystring_param'] );

									//	Push the custom string onto the querystring.
								t3lib_div::_GETset( t3lib_div::array_merge( $_GET, array( $queryString[0] => array( $queryString[1] => $queryStringVal) ) ) );

									//	Use the marker name from the resource record
								$marker = $this->internal['currentRow']['resource_marker_name'];

							}
							else if( $this->internal['currentRow']['type'] == 0 ) {
								$marker = '###DEFAULT_RESOURCES###';
							}

							else 	//	Resource type is other than 'plugin' so we use the marker name from the resource_type record
								$marker = $this->internal['currentRow']['resource_type_marker_name'];

							$resourceTemplate = $this->cObj->getSubpart( $rowTemplate, $marker );
							if( $resourceTemplate )
								$subpartArray[$marker] = $this->pi_list_row( $lConf, $resourceMarkerArray, $resourceTemplate, $this->internal['currentRow'] );

						}

						//	Restore the preview table and row
						$this->internal['currentTable'] = $this->internal['previousTable'];
						$this->internal['currentRow'] = $this->internal['previousRow'];

					}

				break;

				case '###RESOURCE_TITLE###':
					if( $row[$fieldName] ) {
						$this->local_cObj->start( $row, 'tx_wecsermons_series' );
						$markerArray[$key] = $this->local_cObj->stdWrap( $row[$fieldName], $lConf['tx_wecsermons_resources.']['title.'] );
					}
				break;

				case '###RESOURCE_DESCRIPTION###':
					if( $row[$fieldName] )
						$markerArray[$key] = $this->local_cObj->stdWrap( $row[$fieldName], $lConf['tx_wecsermons_resources.']['description.'] );
				break;

				case '###RESOURCE_GRAPHIC###':
					if( $row[$fieldName] )
						$markerArray[$key] = $this->local_cObj->stdWrap( $row[$fieldName], $lConf['tx_wecsermons_resources.']['graphic.'] );
				break;

				case '###RESOURCE_URL###':
					if( $row[$fieldName] )
						$markerArray[$key] = $this->local_cObj->stdWrap( $row[$fieldName], $lConf['tx_wecsermons_resources.']['url.'] );
				break;

				case '###RESOURCE_FILE###':
					if( $row[$fieldName] )
						$markerArray[$key] = $this->local_cObj->stdWrap( $row[$fieldName], $lConf['tx_wecsermons_resources.']['file.'] );
				break;

				case '###RESOURCE_CONTENT###':
						$markerArray[$key] = $this->local_cObj->cObjGetSingle( $this->conf['resource_types'], $this->conf['resource_types.'] );
				break;

				case '###RESOURCE_LINK###':

					//	If 'typolink' segment is defined for this type, render a link as defined by 'typolink', otherwise render a link to the resources' single view
					if( $lConf['tx_wecsermons_resources.']['resource_types.'][$row['type'].'.']['typolink'] ) {

						$wrappedSubpartArray[$key] = $this->local_cObj->typolinkWrap( $lConf['tx_wecsermons_resources.']['resource_types.'][$row['type'].'.']['typolink.'] );
					}
					else {	//	Render a link to single view

						$wrappedSubpartArray[$key] = explode(
							'|',
							$this->pi_list_linkSingle(
								'|',
								$row['uid'],
								$this->conf['allowCaching'],
								array(
									'recordType' => 'tx_wecsermons_resources',
								),
								FALSE,
								$this->conf['pidSingleView'] ? $this->conf['pidSingleView']:0
								)
						);

					}

				break;

				case '###SERIES_TITLE###':
					if( $row[$fieldName] ) {
						$this->local_cObj->start( $row, 'tx_wecsermons_series' );
						$markerArray[$key] = $this->local_cObj->cObjGetSingle( $lConf['tx_wecsermons_series.']['title'], $lConf['tx_wecsermons_series.']['title.'] );
					}
				break;

				case '###SERIES_DESCRIPTION###':
					if( $row[$fieldName] ) {
						$this->local_cObj->start( $row, 'tx_wecsermons_series' );
						$markerArray[$key] = $this->local_cObj->cObjGetSingle( $lConf['tx_wecsermons_series.']['description'], $lConf['tx_wecsermons_series.']['description.'] );
					}
				break;

				case '###SERIES_GRAPHIC###':
					if( $row[$fieldName] ) {
						$this->local_cObj->start( $row, 'tx_wecsermons_series' );
						$markerArray[$key] = $this->local_cObj->cObjGetSingle( $lConf['tx_wecsermons_series.']['graphic'], $lConf['tx_wecsermons_series.']['graphic.']);
					}
				break;

				case '###SERIES_SCRIPTURE###':
					if( $row[$fieldName] ) {
						$this->local_cObj->start( $row, 'tx_wecsermons_series' );
						$markerArray[$key] = $this->local_cObj->cObjGetSingle( $lConf['tx_wecsermons_series.']['scripture'], $lConf['tx_wecsermons_series.']['scripture.'] );
					}
				break;

				case '###SERIES_STARTDATE###':
					if( $row[$fieldName] ) {
						//	Wrap the date, choosing from one of three settings in typoscript
						$dateWrap = $lConf['tx_wecsermons_series.']['startdate.'] ? $lConf['tx_wecsermons_series.']['startdate.'] : $lConf['general_dateWrap.'];
						if( ! $dateWrap ) $dateWrap = $this->conf['general_dateWrap.'];

						$this->local_cObj->start( $row, 'tx_wecsermons_series' );
						$markerArray[$key] = $this->local_cObj->cObjGetSingle( $lConf['tx_wecsermons_series.']['startdate'], $dateWrap );
					}
				break;

				case '###SERIES_ENDDATE###':
					if( $row[$fieldName] ) {

						//	Wrap the date, choosing from one of three settings in typoscript
						$dateWrap = $lConf['tx_wecsermons_series.']['enddate.'] ? $lConf['tx_wecsermons_series.']['enddate.'] : $lConf['general_dateWrap.'];
						if( ! $dateWrap ) $dateWrap = $this->conf['general_dateWrap.'];

						$this->local_cObj->start( $row, 'tx_wecsermons_series' );
						$markerArray[$key] = $this->local_cObj->cObjGetSingle( $lConf['tx_wecsermons_series.']['enddate'], $dateWrap );
					}
				break;

				case '###SERIES_SEASON###':

					//	Check for related season and insert season subpart
					$subpartArray[$key] = '';

					if( $row[$fieldName] ) {

						//	Load the season subpart
						$seasonTemplate = $this->cObj->getSubpart( $rowTemplate, $key );
						$seasonMarkerArray = $this->getMarkerArray('tx_wecsermons_seasons');
						$seasonContent = '';

						//	Store the current table and row while we switch to another table for a moment
						$this->internal['previousTable'] = $this->internal['currentTable'];
						$this->internal['currentTable'] = 'tx_wecsermons_seasons';
						$this->internal['previousRow'] = $this->internal['currentRow'];

						$seasonRes = $GLOBALS['TYPO3_DB']->exec_SELECTquery(
							'tx_wecsermons_seasons.*',
							'tx_wecsermons_seasons',
							' uid in (' . $row[$fieldName] . ')' . $this->cObj->enableFields( 'tx_wecsermons_seasons' )
						);

						$count = 0;
						while( $this->internal['currentRow'] = $GLOBALS['TYPO3_DB']->sql_fetch_assoc( $seasonRes ) ) {

							//	Recursive call to $this->pi_list_row() to populate each speaker marker
							$seasonContent .= $this->pi_list_row( $lConf, $seasonMarkerArray, $seasonTemplate, $this->internal['currentRow'] );
							$count++;
						}

						//	Restore the preview table and row
						$this->internal['currentTable'] = $this->internal['previousTable'];
						$this->internal['currentRow'] = $this->internal['previousRow'];

						//	Replace marker content with subpart
						if( $count > 0 )
							$subpartArray[$key] = $this->cObj->stdWrap( $seasonContent, $lConf['tx_wecsermons_series.']['season.'] );

					}


				break;

				case '###SERIES_TOPICS###':

					$subpartArray[$key] = '';

					// Check for related topics and insert topic subpart
					if( $row[$fieldName] ) {

						//	Get the series_topics subpart
						$topicTemplate = $this->cObj->getSubpart( $rowTemplate, $key );
						$topicMarkerArray = $this->getMarkerArray('tx_wecsermons_topics');
						$topicContent = '';

						//	Store the current table and row while we switch to another table for a moment
						$this->internal['previousTable'] = $this->internal['currentTable'];
						$this->internal['currentTable'] = 'tx_wecsermons_topics';
						$this->internal['previousRow'] = $this->internal['currentRow'];

						$topicRes = $GLOBALS['TYPO3_DB']->exec_SELECTquery(
							'tx_wecsermons_topics.*',
							'tx_wecsermons_topics',
							' uid in (' . $row[$fieldName] . ')' . $this->cObj->enableFields( 'tx_wecsermons_topics' )
						);

						$count = 0;
						while( $this->internal['currentRow'] = $GLOBALS['TYPO3_DB']->sql_fetch_assoc( $topicRes ) ) {
							//	Recursive call to $this->pi_list_row() to populate each speaker marker
							$topicContent .= $this->pi_list_row( $lConf, $topicMarkerArray, $topicTemplate, $this->internal['currentRow'] );
							$count++;
						}

						//	Restore the preview table and row
						$this->internal['currentTable'] = $this->internal['previousTable'];
						$this->internal['currentRow'] = $this->internal['previousRow'];

						//	Replace marker content with subpart
						if( $count > 0 )
							$subpartArray[$key] = $this->cObj->stdWrap( $topicContent, $lConf['tx_wecsermons_series.']['topics.'] );

					}

				break;

				case '###SERIES_LINK###':

					$wrappedSubpartArray[$key] = explode(
						'|',
						$this->pi_list_linkSingle(
							'|',
							$row['uid'],
							$this->conf['allowCaching'],
							array(
								'recordType' => 'tx_wecsermons_series',
							),
							FALSE,
							$this->conf['pidSingleView'] ? $this->conf['pidSingleView']:0
							)
					);

				break;

				case '###TOPIC_TITLE###':
					if( $row[$fieldName] ) {
						$this->local_cObj->start( $row, 'tx_wecsermons_topics' );
						$markerArray[$key] = $this->local_cObj->cObjGetSingle( $lConf['tx_wecsermons_topics.']['title'], $lConf['tx_wecsermons_topics.']['title.'] );
					}

				break;

				case '###TOPIC_DESCRIPTION###':
					if( $row[$fieldName] ) {
						$this->local_cObj->start( $row, 'tx_wecsermons_topics' );
						$markerArray[$key] = $this->local_cObj->cObjGetSingle( $lConf['tx_wecsermons_topics.']['description'], $lConf['tx_wecsermons_topics.']['description.'] );
					}

				break;

				case '###SEASON_TITLE###':
					if( $row[$fieldName] ) {
						$this->local_cObj->start( $row, 'tx_wecsermons_seasons' );
						$markerArray[$key] = $this->local_cObj->cObjGetSingle( $lConf['tx_wecsermons_seasons.']['title'], $lConf['tx_wecsermons_seasons.']['title.'] );

					}

				break;

				case '###SPEAKER_FIRSTNAME###':
					if( $row[$fieldName] ) {
						$this->local_cObj->start( $row, 'tx_wecsermons_speakers' );
						$markerArray[$key] = $this->local_cObj->cObjGetSingle( $lConf['tx_wecsermons_speakers.']['firstname'], $lConf['tx_wecsermons_speakers.']['firstname.'] );
					}

				break;

				case '###SPEAKER_LASTNAME###':
					if( $row[$fieldName] ) {
						$this->local_cObj->start( $row, 'tx_wecsermons_speakers' );
						$markerArray[$key] = $this->local_cObj->cObjGetSingle( $lConf['tx_wecsermons_speakers.']['lastname'], $lConf['tx_wecsermons_speakers.']['lastname.'] );
					}

				break;

				case '###SPEAKER_URL###':
					if( $row[$fieldName] ) {
						$this->local_cObj->start( $row, 'tx_wecsermons_speakers' );
						$markerArray[$key] = $this->local_cObj->cObjGetSingle( $lConf['tx_wecsermons_speakers.']['url'], $lConf['tx_wecsermons_speakers.']['url.'] );
					}

				break;

				case '###SPEAKER_EMAIL###':

					//	Create link, making sure it is spam protected
					if( $row[$fieldName] ) {
						$this->local_cObj->start( $row, 'tx_wecsermons_speakers' );
						$markerArray[$key] = $this->local_cObj->cObjGetSingle( $lConf['tx_wecsermons_speakers.']['email'], $lConf['tx_wecsermons_speakers.']['email.'] );

					}
				break;

				case '###SPEAKER_PHOTO###':
					if( $row[$fieldName] ) {
						$this->local_cObj->start( $row, 'tx_wecsermons_speakers' );
						$markerArray[$key] = $this->local_cObj->cObjGetSingle( $lConf['tx_wecsermons_speakers.']['photo'], $lConf['tx_wecsermons_speakers.']['photo.'] );
					}

				break;

				case '###SPEAKER_LINK###':

					$this->local_cObj->start( $row, 'tx_wecsermons_speakers' );

					//	If 'typolink' is set, generate a link as defined by the 'typolink' segment, otherwise link to the speakers single view
					if( $lConf['tx_wecsermons_speakers.']['typolink'] ) {

						//	Generate a link as defined by the 'typolink' segment
						$wrappedSubpartArray[$key] = $this->local_cObj->typolinkWrap( $lConf['tx_wecsermons_speakers.']['typolink.'] );
					}
					else	{ // Generate a link to the Speaker Single view
						$wrappedSubpartArray[$key] = explode(
							'|',
							$this->pi_list_linkSingle(
								'|',
								$row['uid'],
								$this->conf['allowCaching'],
								array(
									'recordType' => 'tx_wecsermons_speakers',
								),
								FALSE,
								$this->conf['pidSingleView'] ? $this->conf['pidSingleView']:0
								)
						);
					}

				break;

				case '###ALTERNATING_CLASS###':
					$markerArray['###ALTERNATING_CLASS###'] = $c % 2 ? $this->pi_getClassName( 'list' ) . ' ' . $lConf['alternatingClass'] : $this->pi_getClassName('list');
				break;

				case '###BROWSE_LINKS###':

					$markerArray['###BROWSE_LINKS###'] = $this->pi_list_browseresults($lConf['showResultCount'], '', $lConf['browseBox_linkWraps.'] );
				break;

				case '###BACK_LINK###':

					//	If recordType is not set, retreive value or set it to sermons table. This is in case of hard linking to the single view instead of linking through the list view.
					if( ! isset( $this->piVars['recordType'] ) ) $this->piVars['recordType'] = getConfigVal( $this, 'detail_table', 'slistView', 'detail_table', $lConf, 'tx_wecsermons_sermons' );

					$wrappedSubpartArray[$key] = explode(
						'|',
						$this->pi_linkTP(
							'|',
							array(),
							$this->conf['allowCaching'],
							$this->conf['pidListView']
						)
					);
				break;

				case '###BACK_TO_LIST###':

					$markerArray[$key] =  $this->cObj->stdWrap( $this->pi_getLL('back','Back'), $lConf['back.'] );

				break;

				}	// End Switch

			//	Hook  for processing extra markers
			if( is_array($GLOBALS['TYPO3_CONF_VARS']['EXTCONF']['tx_wecsermons_pi1']['processMarker'] ) ) {

				foreach( $GLOBALS['TYPO3_CONF_VARS']['EXTCONF']['tx_wecsermons_pi1']['processMarker'] as $classRef ) {

					$processObject = &t3lib_div::getUserObj( $classRef, 'tx_' );

					$processObject->processMarker( &$this, $lConf, &$markerArray, &$row, $c, $key );
				}

			}


		}	// End Foreach


		$lContent = $this->cObj->substituteMarkerArrayCached($rowTemplate, $markerArray, $subpartArray, $wrappedSubpartArray );

		//	Only add edit UI if there is a row of data we're processing
		if( $row ) {

			//	Get editIcon using $this->internal['currentRow'] and $this->internal['currentTable']
			$lContent = $this->pi_getEditIcon( $lContent, $this->getFeAdminList() );

			//	Get Editpanel using $this->internal['currentRow'] and $this->internal['currentTable']
			$lContent .= $this->pi_getEditPanel();

		}
	return $lContent;
	}

	/**
	 * getMarkerArray: Returns the markerArray for a specific table
	 *
	 * 	Default returned array is for general page markers. Browse_links, back_link, etc.
	 *
	 * @param	string		Table name to retrieve markers for
	 * @return	array		Array filled with markers as keys, with empty values
	 */
	 function getMarkerArray( $tableName = '' ) {

	 		$markerArray = array();

	 	switch ( $tableName ) {
	 		case 'tx_wecsermons_sermons':
	 			$markerArray = array (
	 				'###SERMON_TITLE###' => 'title',
	 				'###SERMON_OCCURANCE_DATE###' => 'occurance_date',
	 				'###SERMON_DESCRIPTION###' => 'description',
	 				'###SERMON_SCRIPTURE###' => 'scripture',
	 				'###SERMON_TOPICS###' => 'topics_uid',
	 				'###SERMON_SERIES###' => 'series_uid',
	 				'###SERMON_SPEAKERS###' => 'speakers_uid',
					'###SERMON_GRAPHIC###' => 'graphic',
					'###SERMON_LINK###' => '',
					'###ALTERNATING_CLASS###' => '',
	 				'###SERMON_RESOURCES###' => 'resources_uid',		//	Only included to kick off the processing of resources. Resource markers are defined in the resource_type records or resource record if of type 'plugin'
	 			);

/*
	 			$wrap = array (
	 				'wrap' => '###|###'
	 			);
	 			//	TODO: Search for additional marker types that could be present for a sermon resource, include those in the array
	 			$query = "
					select distinct marker_name
					from tx_wecsermons_resources
					where marker_name != '' " . $this->cObj->enableFields('tx_wecsermons_resources');

				$res = $GLOBALS['TYPO3_DB']->sql_query( $query );
				while( $record = $GLOBALS['TYPO3_DB']->sql_fetch_assoc( $res ) ) {

					$offset =  $this->cObj->stdWrap( $record['marker_name'], $wrap );
					$markerArray[$offset] = '';
				}


	 			$query = "
					select distinct marker_name
					from tx_wecsermons_resource_types
					where marker_name != '' " . $this->cObj->enableFields('tx_wecsermons_resource_types');

				$res = $GLOBALS['TYPO3_DB']->sql_query( $query );
				while( $record = $GLOBALS['TYPO3_DB']->sql_fetch_assoc( $res ) ) {

					$offset =  $this->cObj->stdWrap( $record['marker_name'], $wrap );
					$markerArray[$offset] = '';
				}
*/
	 		break;

	 		case 'tx_wecsermons_series':
	 			$markerArray = array (
					'###SERIES_TITLE###' => 'title',
					'###SERIES_STARTDATE###' => 'startdate',
					'###SERIES_ENDDATE###' => 'enddate',
					'###SERIES_DESCRIPTION###' => 'description',
					'###SERIES_SCRIPTURE###' => 'scripture',
					'###SERIES_GRAPHIC###' => 'graphic',
					'###SERIES_SEASON###' => 'seasons_uid',
					'###SERIES_TOPICS###' => 'topics_uid',
					'###SERIES_LINK###' => '',
					'###ALTERNATING_CLASS###' => '',

				);
	 		break;

	 		case 'tx_wecsermons_topics':
	 			$markerArray = array (
					'###TOPIC_TITLE###' => 'title',
					'###TOPIC_DESCRIPTION###' => 'description',
					'###ALTERNATING_CLASS###' => '',
				);
	 		break;

	 		case 'tx_wecsermons_speakers':
	 			$markerArray = array (
					'###SPEAKER_FIRSTNAME###' => 'firstname',
					'###SPEAKER_LASTNAME###' => 'lastname',
					'###SPEAKER_EMAIL###' => 'email',
					'###SPEAKER_URL###' => 'url',
					'###SPEAKER_PHOTO###' => 'photo',
					'###SPEAKER_LINK###' => '',
					'###ALTERNATING_CLASS###' => '',
				);
	 		break;

	 		case 'tx_wecsermons_resources':
	 			$markerArray = array (
					'###RESOURCE_TITLE###' => 'title',
					'###RESOURCE_DESCRIPTION###' => 'description',
					'###RESOURCE_GRAPHIC###' => 'graphic',
					'###RESOURCE_FILE###' => 'file',
					'###RESOURCE_URL###' => 'url',
					'###RESOURCE_CONTENT###' => '',
					'###ALTERNATING_CLASS###' => '',
					'###RESOURCE_LINK###' => '',
				);
	 		break;

	 		case 'tx_wecsermons_seasons':
	 			$markerArray = array (
					'###SEASON_TITLE###' => 'title',
					'###ALTERNATING_CLASS###' => '',
				);
	 		break;

	 		case 'searchbox':
	 			$markerArray = array(
	 				'###FORM_ACTION###' => '',
	 				'###SEARCHBOX_OPTIONS###' => '',
	 				'###SEARCH_BUTTON_NAME###' => '',
	 			);
	 		break;

	 		default:
	 			$markerArray = array (
	 				'###BROWSE_LINKS###' => '',
	 				'###BACK_TO_LIST###' => '',
	 				'###BACK_LINK###' => '',
	 			);
	 		break;

	 	}

	 	return $markerArray;
	}

	/**
	 * formatStr: Format string with general_stdWrap from configuration
	 *
	 * @param	string		$str: String to wrap
	 * @return	string		wrapped string
	 */
	function formatStr( $str ) {

		if ( is_array( $this->conf['general_stdWrap.'] ) )
			return $this->local_cObj->stdWrap($str, $this->conf['general_stdWrap.']);
		else
			return $str;
	}

	/**
	 * getTemplateKey: Retrieves the content for a named template. Used to pull a template subpart from a template file
	 *
	 * @param	string		$tableName: This is the table name to retrieve the template key name for.
	 * @return	string		A string value that is the template key name for an SMS table name.
	 */
	function getTemplateKey($tableName) {

		switch( $tableName ) {
			case 'tx_wecsermons_sermons':
				$key = 'Sermon';
			break;

			case 'tx_wecsermons_resources':


				$key = 'Resource';
			break;

			case 'tx_wecsermons_topics':
				$key = 'Topic';
			break;

			case 'tx_wecsermons_seasons':
				$key = 'Season';
			break;

			case 'tx_wecsermons_series':
				$key = 'Series';
			break;

			case 'tx_wecsermons_speakers':
				$key = 'Speaker';
			break;

			}

		//	TODO: Add hook for custom tables

			return $key;

	}

	/**
	 * getUrlToList:	Returns the path to the current page with SMS querystring values intact. Will return absolute path if $absolute is true.
	 *
	 * @param	boolean		$absolute:	Boolean value indicating whether to return an absolute path.
	 * @return	string		The absolute or relative path to the current page.
	 */
	function getUrlToList ( $absolute ) {

		return $absolute ? t3lib_div::getIndpEnv('TYPO3_SITE_URL') .
		$this->pi_linkTP_keepPIvars_url( array(), $this->conf['allowCaching'], 0 ) :
		$this->pi_linkTP_keepPIvars_url( array(), $this->conf['allowCaching'], 0 );

	}


	/**
	 * getUrlToSingle:	Returns the path to the single view of a particular SMS record with SMS querystring values intact. Will return absolute path if $absolute is true.
	 *
	 * @param	boolean		$absolute:	Boolean value indicating whether to return an absolute path.
	 * @param	string		$tableName: The table name to retrieve the record from. Should be the full table name, prepended with 'tx_wecsermons_'
	 * @param	int		$uid: An integer value that is the UID of the record we wish to get the URL for.
	 * @return	string		Return value is the absolute or relative path to the requested SMS record.
	 */
	function getUrlToSingle ( $absolute, $tableName, $uid ) {

		$piVar = array (
			'recordType' => $tableName,
			'showUid' => $uid,
		);

		return $absolute ? t3lib_div::getIndpEnv('TYPO3_SITE_URL') .
		$this->pi_linkTP_keepPIvars_url( $piVar, $this->conf['allowCaching'], 0, $this->conf['pidSingleView'] ) :
		$this->pi_linkTP_keepPIvars_url( $piVar, $this->conf['allowCaching'], 0, $this->conf['pidSingleView'] );

	}

	/**
	 * getFeAdminList: Retrieves the 'fe_admin_fieldList' for a given data table, used for generating the fe editIcon. If no table name is given, then the table name stored in $this->internal['currentTable'] is used.
	 *
	 * @param	string		$tableName: The name of the table to retrieve the field list for.
	 * @return	string		Return value is a CSV string of fieldnames used in the editIcon fieldlist
	 */
	function getFeAdminList( $tableName = '' ) {

		if( ! $tableName ) $tableName = $this->internal['currentTable'];

		//	Load up the tca for given table
		$GLOBALS['TSFE']->includeTCA($TCAloaded = 1);
		t3lib_div::loadTCA( $tableName );

		return $GLOBALS['TCA'][$tableName]['feInterface']['fe_admin_fieldList'];

	}

	/**
	 * getNamedTemplateContent: Retrieves the content for a named template. Used to load a template subpart from a template file. A member variable is used to store the template content, $this->template.
	 *
	 * @param	string		$keyName: This is the keyname of the type of template to retrieve such as SERMON, SERIES, TOPIC, etc.
	 * @param	string		$view: This is the name of the view to retrieve, SINGLE, LIST, etc.
	 * @return	string		Return value is the content of a specfic marker-based template
	 * @see loadTemplate()
	 */
	function getNamedTemplateContent($keyName = 'sermon', $view = 'single') {

		// Make sure template is loaded into instance of our class
		$this->loadTemplate();

		$keyName = strtoupper( $keyName );
		$view = strtoupper( $view );

		switch( $view ) {

			case 'LIST':
				$templateContent = $this->cObj->getSubpart(
					$this->template['total'],
					sprintf( '###TEMPLATE_%s%s###',
						$view,
						$this->internal['layoutCode']
					)
				);
			break;

			case '':
				$templateContent = $this->cObj->getSubpart(
					$this->template['total'],
					sprintf( '###TEMPLATE_%s%s###',
						$keyName,
						$this->internal['layoutCode']
					)
				);

			break;

			default:
			$templateContent = $this->cObj->getSubpart(
				$this->template['total'],
				sprintf( '###TEMPLATE_%s_%s%s###',
					$keyName,
					$view,
					$this->internal['layoutCode']
				)
			);

		}

		return $templateContent;
	}

	/**
	 * getNamedSubpart: Retrieves a template subpart given the subparts name, and the content stream to read it from.
	 *
	 * @param	string		$subpartName: The name of the subpart
	 * @param	string		$content: The content stream where the subpart is stored
	 * @return	string		Returns a string value containing on the subpart requested.
	 */
	function getNamedSubpart( $subpartName, $content ) {
		// Make sure template is loaded into instance of our class
		$this->loadTemplate();

		//	Fix subpart name if TYPO tags were not inserted
		$subpartName = strrpos( $subpartName, '###') ? strtoupper( $subpartName ) :  '###'.strtoupper( $subpartName ).'###';

		return $this->cObj->getSubpart( $content, $subpartName );

	}

	/**
	 * loadTemplate: Reads in a template file and populates the $template array member variable with the total content, and various other subparts:
	 * 	list, content, item
	 *
	 * @return	void
	 */
	function loadTemplate() {

		if( ! $this->template ) {
			$this->template = array(
				'total' => '',
				'single' => '',
				'list' => '',
				'item' => '',
				'content' => ''
			);

			//	Get the file location and name of our template file
			$templateFile = $this->getTemplateFile();
			$this->template['total'] = $this->cObj->fileResource( $this->internal['templateFile'] );  
			$this->template['list'] =  $this->getNamedTemplateContent('', 'list');
			$this->template['content'] = $this->getNamedSubpart('CONTENT', $this->template['list'] );
			$this->template['item'] = $this->getNamedSubpart('ITEM', $this->template['content'] );

		}
	}

	/**
	 * getTemplateFile: Loads and returns the content of the template file specified in configuration.
	 *
	 * @return	string		Content of the template file specified in configuration
	 */
	function getTemplateFile() {

		//	Load the HTML template
		$templateFile = $this->pi_getFFvalue($this->cObj->data['pi_flexform'], 'templateFile', 'sDEF');

		//	If template loaded from plugin, prepend upload path, otherwise use templateFile from TypoScript configuration
		$templateFile = $templateFile ? 'uploads/tx_wecsermons/'.$templateFile : $this->conf['templateFile'];

		//	Store the name of the template file, for retrieval later
		$this->internal['templateFile'] = $templateFile;

		return $templateFile;

	}

	/**
	 * getResources: Returns all the resources associated with a particular sermon uid, or a specific resource uid.
	 * The function runs a SQL query to find all related resources for a particular sermon record, joining together multiple tables. The array returned is populated with fields from multiple tables.
	 *
	 * @param	string		$sermonUid
	 * @param	string		$resourceUid:	The UID of a resource. If specified, only this one resource
	 * @return	array		An array of associative arrays. Each associative array represents all properties of one resource, and all properties of its type.
	 */
	function getResources( $sermonUid = '', $resourceUid = '') {

		if( ! $this->internal['resources'] ) {
			//	Build query to select resource attributes along with resource type name
			$WHERE = $sermonUid ? 'AND tx_wecsermons_sermons.uid = ' . $sermonUid . ' ' :'';
			$WHERE = $resourceUid ? 'AND tx_wecsermons_resources.uid = ' . $resourceUid . ' ' : $WHERE;
			$WHERE .= $this->cObj->enableFields('tx_wecsermons_resources');
			$query = 'select distinct
			tx_wecsermons_resources.uid,
			tx_wecsermons_resources.type,
			tx_wecsermons_resources.title,
			tx_wecsermons_resources.description,
			tx_wecsermons_resources.graphic,
			tx_wecsermons_resources.file,
			tx_wecsermons_resources.mime_type,
			tx_wecsermons_resources.url,
			tx_wecsermons_resources.querystring_param,
			tx_wecsermons_resources.rendered_record,
			tx_wecsermons_resources.marker_name resource_marker_name,
			tx_wecsermons_resources.template_name resource_template_name,
			tx_wecsermons_resource_types.title type_title,
			tx_wecsermons_resource_types.description type_description,
			tx_wecsermons_resource_types.icon,
			tx_wecsermons_resource_types.marker_name resource_type_marker_name	,
			tx_wecsermons_resource_types.template_name resource_type_template_name
			from tx_wecsermons_resources
					join tx_wecsermons_sermons_resources_uid_mm on tx_wecsermons_resources.uid=tx_wecsermons_sermons_resources_uid_mm.uid_foreign
			join tx_wecsermons_sermons on tx_wecsermons_sermons.uid=tx_wecsermons_sermons_resources_uid_mm.uid_local
			left join tx_wecsermons_resource_types on tx_wecsermons_resources.type=tx_wecsermons_resource_types.uid
		 			where 1=1 ' . $WHERE;

			$res = $GLOBALS['TYPO3_DB']->sql_query( $query );

			$resources = array();

			//	TODO: What if none found?
			//	For each related resource, determine the type and render it
			while( $record = $GLOBALS['TYPO3_DB']->sql_fetch_assoc( $res ) )
				$resources[] = $record;

			//	Store the resources array so we don't have to hit the database again if we need to access this function.
			$this->internal['resources'] = $resources;

		}
		else
			$resources = $this->internal['resources'];


		return $resources;

	}

	/**
	 * emptyResourceSubparts: This function is used to determin all the possible subpart marker names based on custom resource types, and set the marker array value to an empty string.
	 * This initializes the marker array with empty strings before use.
	 *
	 * @param	array		$subpartArray:	 The subpartArray to be initalized
	 * @return	void
	 */
	function emptyResourceSubparts( &$subpartArray ) {

		$res = $GLOBALS['TYPO3_DB']->exec_SELECTquery(
			'distinct marker_name',
			'tx_wecsermons_resources',
			 'marker_name != \'\' '.$this->cObj->enableFields( 'tx_wecsermons_resources' )
		);

		while( $marker = $GLOBALS['TYPO3_DB']->sql_fetch_assoc( $res ) ) {
			$subpartArray[$marker['marker_name']] = '';
		}

		$res = $GLOBALS['TYPO3_DB']->exec_SELECTquery(
			'distinct marker_name',
			'tx_wecsermons_resource_types',
			  'marker_name != \'\' '.$this->cObj->enableFields( 'tx_wecsermons_resource_types' )
		);

		while( $marker = $GLOBALS['TYPO3_DB']->sql_fetch_assoc( $res ) )
			$subpartArray[$marker['marker_name']] = '';


	}

	/**
	 * throwError: A helper function that returns an HTML formatted error message for display on the front-end. ** MUST be user friendly!! **
	 *
	 * @param	string		$type: A given type or category of error message we are displaying
	 * @param	string		$message: The error message to be displayed
	 * @param	string		$detail: Any detail we'd like to include, such as the variable name that caused the error and it's value at the time.
	 * @return	string		An HTML formatted error message
	 */
	function throwError( $type, $message, $detail = '' ) {

		//	TODO: Possibly add logic to fire an e-mail off with detail, or log the error.

		$format =  sprintf(
		'
			<div style="border: 1px solid black; max-width:400px; background-color: #DDDD66; float: center;">
				<h1>%s</h1>
				<p>%s</p>
				<p>%s</p>
			</div>
		',
		htmlspecialchars( $type ), htmlspecialchars( $message ), nl2br( htmlentities( $detail ) ) );

		return $format;

	}

	/**
	 * getTutorial:	Retrieves tutorial content, depending on the tutorial selected in the plugin configuration.
	 *
	 * @param	int		$tutorial: An integer value determining which tutorial we wish to render.
	 * @return	string		Content of the tutorial
	 */
	function getTutorial ( $tutorial ) {

		$content = '';

		//	Check which tutorial was chosen, and pull in the content from the apporpriate static HTML file
		switch( $tutorial )
		{
			case '1':	//	Ginghamsburg tutorial

				switch($this->piVars['page']) {
					case '2' :
						$content .="<H1>Example page of a view on study material</H1>";
						$content .= t3lib_div::getURL(t3lib_extMgm::extPath('wec_sermons').'tut/ging/study_view.htm');
					break;

					case '3':
						$content .="<H1>Example page of another view on study material</H1>";
						$content .= t3lib_div::getURL(t3lib_extMgm::extPath('wec_sermons') .'tut/ging/study_exp.htm');
					break;

					default:
						$content .="<H1>Example page of a view on a sermon listing</H1>";
						$content .= t3lib_div::getURL(t3lib_extMgm::extPath('wec_sermons') .'tut/ging/list_view.htm');

				}

			//	Replace existing relative paths to files
			$content = str_replace( 'images/', t3lib_extMgm::siteRelPath('wec_sermons').'tut/ging/images/', $content );

			break;

			case '2':	//	Living Water tutorial

				switch($this->piVars['page']) {
					case '2' :
						$content .="<H1>Example page of a view on sermon series</H1>";
						$content .= t3lib_div::getURL(t3lib_extMgm::extPath('wec_sermons').'tut/living_water/series_view.htm');
					break;

					case '3':
						$content .="<H1>Example page of a view on sermons archive</H1>";
						$content .= t3lib_div::getURL(t3lib_extMgm::extPath('wec_sermons').'tut/living_water/archive_view.htm');
					break;

					default:
						$content .="<H1>Example page of a view on a single sermon</H1>";
						$content .= t3lib_div::getURL(t3lib_extMgm::extPath('wec_sermons').'tut/living_water/single_view.htm');

				}


				//	Replace existing relative paths
				$content = str_replace( 'images/', t3lib_extMgm::siteRelPath('wec_sermons').'tut/living_water/images/', $content );
			break;
			default:

		}

		//	set piVar['page'] = 1, or increment to next page
		is_null( $this->piVars['page'] ) ? $this->piVars['page'] = 2 : $this->piVars['page']++;

		//	reset counter to 1 when > 3
		if( $this->piVars['page'] > 3 ) $this->piVars['page'] = 1;

		//	Modify all links in the static HTML file, linking to the next screen
		$content = preg_replace('/href="#"/',  'href="'.$this->pi_linkTP_keepPIvars_url(array() , 1 ).'"', $content);


			return $content;
	}	// End getTutorial

}	// End class tx_wecsermons_pi1

/**
 * uniqueCsv:	Given any number of CSV strings, this function combines the strings, returning a CSV string without duplicate values.
 *
 * @return	string		A CSV string, with unique values.
 */
function uniqueCsv()	{
	$max = func_num_args();
	$ttlString = '';
	for( $i =0; $i < $max; $i++ )  {
		$ttlString .=func_get_arg($i) .  ',';

	}
	return implode(',', array_unique( t3lib_div::trimExplode(',', $ttlString, 1) ) );
}

/**
 * unique_array: Given any number of single dimensional arrays, this function combines the arrays, returning an array without duplicate values.
 *
 * @return	string		An array, without duplicate values.
 */
function unique_array() {
	$max = func_num_args();
	$ttlString = '';
	for( $i =0; $i < $max; $i++ )  {
		$ttlString .=func_get_arg($i) .  ',';

	}
	return array_unique( t3lib_div::trimExplode(',', $ttlString, 1) ) ;

}

/**
 * get_foreign_column: Searches through the TCA array of the current table name for a related table, returning the column name used to create the relation.
 *
 * @param	string		$currentTable: Table name to search through
 * @param	string		$relatedTable: Related table to search for
 * @return	string		The column name that relates currentTable to relatedTable. Returns null if no relation is found.
 */
function get_foreign_column( $currentTable, $relatedTable ) {

	//	Load up the tca for given table
	$GLOBALS['TSFE']->includeTCA($TCAloaded = 1);
	t3lib_div::loadTCA( $currentTable );

	foreach( $GLOBALS['TCA'][$currentTable]['columns'] as $columnName => $value ) {
			if( $value['config']['foreign_table'] == $relatedTable )
				return $columnName;
	}

	return '';

}

/**
 * getConfigVal: Return the value from either plugin flexform, typoscript, or default value, in that order
 *
 * @param	object		$Obj: Parent object calling this function
 * @param	string		$ffField: Field name of the flexform value
 * @param	string		$ffSheet: Sheet name where flexform value is located
 * @param	string		$TSfieldname: Property name of typoscript value
 * @param	array		$lConf: TypoScript configuration array from local scope
 * @param	mixed		$default: The default value to assign if no other values are assigned from TypoScript or Plugin Flexform
 * @return	mixed		Configuration value found in any config, or default
 */
function getConfigVal( &$Obj, $ffField, $ffSheet, $TSfieldname, $lConf, $default = '' ) {

	//	Retrieve values stored in flexform and typoscript
	$ffValue = $Obj->pi_getFFvalue($Obj->cObj->data['pi_flexform'], $ffField, $ffSheet);
	$tsValue = $lConf[$TSfieldname];

	//	Use flexform value if present, otherwise typoscript value
	$retVal = $ffValue ? $ffValue : $tsValue;

		//	Return value if found, otherwise default
	return $retVal ? $retVal : $default;
}

/**
 * splitTableAndUID: Helper function that splits a table name and uid from the format stored by the TYPO3 backend, returning the values in an array. Format: 'tablename_uid'
 *
 * @param	string		$record: The string value of tablename and uid in the form 'table_uid'
 * @return	array		Array in the form array( 'table' => tablename, 'uid' => uid )
 */
function splitTableAndUID($record) {
	$break = strrpos($record, "_");
	$uid = substr($record, $break+1);
	$table = substr($record, 0, $break);

	return array("table" => $table, "uid" => $uid);
}
if (defined('TYPO3_MODE') && $TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/wec_sermons/pi1/class.tx_wecsermons_pi1.php'])	{
	include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/wec_sermons/pi1/class.tx_wecsermons_pi1.php']);
}

?>
