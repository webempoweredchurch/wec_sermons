
# Include our fe plugin class
includeLibs.tx_wecsermons= EXT:wec_sermons/pi1/class.tx_wecsermons_pi1.php

plugin.tx_wecsermons_pi1 = USER
plugin.tx_wecsermons_pi1 {

	userFunc = tx_wecsermons_pi1->main

	CMD =
	detailTable =
	groupTable =

	pidList =
	recursive =

	useStoragePid  = {$plugin.tx_wecsermons_pi1.useStoragePid}
	pidSingleView = {$plugin.tx_wecsermons_pi1.pidSingleView}
	pidListView = {$plugin.tx_wecsermons_pi1.pidListView}
	pidSearchView = {$plugin.tx_wecsermons_pi1.pidSearchView}

	# Whether the extension caches content or not
	allowCaching = {$plugin.tx_wecsermons_pi1.allowCaching}

	# Rendering of text items. re-use the RTE parseFunc configuration for normal content
	general_stdWrap {
		parseFunc < tt_content.text.20.parseFunc
	}

	# General wrap for dates in the wec_sermons extension
	general_dateWrap {
		strftime = %A,  %b. %d %Y
	}
	
	stdHeader = COA
	stdHeader {
		10 = TEXT
		10.field = title
		10.dataWrap = <div class="csc-header csc-header-n{cObj:parentRecordNumber}">|</div>
		10.fieldRequired = title
		10.prefixComment = 2 | Header:
	}

	# Marker based template file, which defines each view
	templateFile = {$plugin.tx_wecsermons_pi1.file.templateFile}

	# List of tables that any view can be generated from
	allowedTables = tx_wecsermons_sermons,tx_wecsermons_series,tx_wecsermons_resources,tx_wecsermons_topics,tx_wecsermons_seasons,tx_wecsermons_speakers,tx_wecsermons_resources

	#	The subpart marker used to define resources of type 'default'
	defaultMarker = ###DEFAULT_RESOURCES###
	defaultTemplate = ###TEMPLATE_RESOURCE_DEFAULT###

	# CASE for rendering ###RESOURCE_CONTENT###
	# Resource types are identified by thier typoscript_object_name field.
	resource_types = CASE
	resource_types {

		# Use the field 'type' on a tx_wecsermons_resources record
		key.field = typoscript_object_name

		# MP3 Audio
		MP3 = COA
		MP3 {
			10 = < plugin.tx_wecsermons_pi1.stdHeader
						
			20 < plugin.tx_wecflashplayer_pi2
			20 {
				audiobase.value = uploads/tx_wecsermons/
				audiofile.setCurrent.field = file
				audiofile.setCurrent.listNum = 0
				audiofile.current = 1
			}
			
			30 = TEXT
			30.field = description
			30.parseFunc < plugin.tx_wecsermons_pi1.general_stdWrap.parseFunc
			
			wrap = <div class="tx-wecsermons-pi1-mp3">|</div>
		}
		
		# Flash video
		FLV = COA
		FLV {
		
			10 = < plugin.tx_wecsermons_pi1.stdHeader
						
			20 < plugin.tx_wecflashplayer_pi1
			20 {
				videobase.value = uploads/tx_wecsermons/
				videohigh.setCurrent.field = file
				videohigh.setCurrent.listNum = 0
				videohigh.current = 1
				videolow.setCurrent.field = file
				videolow.setCurrent.listNum = 1
				videolow.current = 1
			}

			30 = TEXT
			30.field = description
			30.parseFunc < plugin.tx_wecsermons_pi1.general_stdWrap.parseFunc
			
			wrap = <div class="tx-wecsermons-pi1-flv">|</div>
		}
		
		# PDF (Portable Document)
		PDF = COA
		PDF {
			10 = IMAGE
			10 {
				
				prefixComment = 2 | PDF Preview:
				altText.field = title
				file.import = uploads/tx_wecsermons/
				file.import.field = file
				file.width = 150m
				file.height  = 150m
				wrap = <div class="tx-wecsermons-pi1-pdf-preview" style="float: left;">|</div>
				stdWrap.typolink {
					parameter = uploads/tx_wecsermons/{field:file}
					parameter {
						setCurrent.field = file
						setCurrent.listNum = 0
						insertData = 1
					}
				}
			}
			
			20 = TEXT
			20.prefixComment = 2 | PDF File Link:
			20.field = title
			20.typolink {
				parameter = uploads/tx_wecsermons/{field:file}
				parameter.insertData = 1
			}
			20.wrap = <p class="bodytext">|</p>
			
			30 = TEXT
			30.field = description
			30.parseFunc < plugin.tx_wecsermons_pi1.general_stdWrap.parseFunc
			
			wrap = <div class="tx-wecsermons-pi1-pdf">|</div>
		}

		# WEC Discussion plugin
		discussion < plugin.tx_wecdiscussion_pi1


		news < plugin.tt_news
		news {
			code >
			code = SINGLE
			substitutePagetitle = 0
			templateFile = EXT:wec_sermons/res/tt_news_v2_template.html
		}

		poll < plugin.tx_jkpoll_pi1
		poll {
			type = 1	
		} 

		JPG = COA
		JPG {
			10 = IMAGE
			10.import = uploads/tx_wecsermons/
			10.import.field = graphic
			10.width = 150px

			# Caption
			20 = TEXT
			20.field = title
			20.required = 1
			20.fontTag = <div class="tx-wecsermons-pi1-jpg-caption">|</div>
			
			wrap = <div class="tx-wecsermons-pi1-jpg">|</div>
		}

		# This is the 'Default' resource type. This rendering will be used if the proper key has not been defined for the resource you are rendering.
		# To define a new resource key, create a new property within the plugin.tx_wecsermons_pi1.resource_types CASE cObject. You can use the 'default' property as a starting point.
		default = COA
		default {

			10 = < plugin.tx_wecsermons_pi1.stdHeader

			20 = TEXT
			20.field = file
			20.listNum = 0
			20.typolink = 1
			20.typolink {
				parameter = uploads/tx_wecsermons/{current:1}
				parameter.setCurrent.field = file
				parameter.setCurrent.listNum = 0
				parameter.insertData = 1
				extTarget = _blank			
			}

		}

	}

	# *****************
	# Single view configuration
	# *****************
	singleView {

		back = TEXT
		back {
			parseFunc < plugin.tx_wecsermons_pi1.general_stdWrap.parseFunc
		}

		layoutCode =

		tx_wecsermons_sermons {

			# Wrap for the title column
			title = TEXT
			title {
				wrap = |
				parseFunc < plugin.tx_wecsermons_pi1.general_stdWrap.parseFunc
				field = title
			}

			# Specific date wrap for the occurance_date column in tx_wecsermons_sermons table
			occurance_date = TEXT
			occurance_date {
				strftime = %B %d, %Y
				wrap = |<br/>
				field = occurance_date
			}

			description = TEXT
			description {
				parseFunc < plugin.tx_wecsermons_pi1.general_stdWrap.parseFunc
				field = description
			}

			scripture = TEXT
			scripture {
				wrap = |<br/>
				field = scripture
			}

			graphic = IMAGE
			graphic {
			wrap = |<br/>
				file {
					import = uploads/tx_wecsermons/
					import.field = graphic
					width = 128m
					height = 128m
				}
				imageLinkWrap = 1
				imageLinkWrap {
					enable = 1
					JSwindow = 1
					JSwindow.expand = 20,20
				}
			}

			topics = TEXT
			topics {
				wrap = <div class="tx-wecsermons-sermon-topics">|</div>
			}

			speakers = TEXT
			speakers {
				wrap = <div class="tx-wecsermons-sermon-speakers">|</div>

			}

			series = TEXT
			series {
				wrap = <div class="tx-wecsermons-sermon-series">|</div>
			}

		}

		tx_wecsermons_resources {

			# If typolink = 0, then links to the single view of a resource.
			typolink = 1
			typolink {
				parameter = uploads/tx_wecsermons/{current:1}
				parameter.setCurrent.field = file
				parameter.setCurrent.listNum = 0
				parameter.insertData = 1
				extTarget = _blank
			}
			
			# resource_types properties define whether to render the ###RESOURCE_LINK### tag as a link to the resources' single view, or by a typolink configuration.
			# See the TSRef for details on the typolink data type: http://typo3.org/documentation/document-library/references/doc_core_tsref/current/view/5/8/
			resource_types {

				# Type PDF
				PDF {
					typolink < plugin.tx_wecsermons_pi1.singleView.tx_wecsermons_resources.typolink
				}

				MP3 {
					typolink < plugin.tx_wecsermons_pi1.singleView.tx_wecsermons_resources.typolink
				}

				# Default resource type, links to the first file in the list
				default {
					typolink < plugin.tx_wecsermons_pi1.singleView.tx_wecsermons_resources.typolink

				}
			}

			title = TEXT
			title.field = title
			title.wrap = <dl><dt>|<dt>
			
			file = TEXT
			file.field = file
			file.listNum = 0
			file.wrap = <dd>|</dd></dl>

			graphic = IMAGE
			graphic {
				wrap = <div class="tx-wecsermons-pi1-resource-graphic">|<div>
				file {
					import = uploads/tx_wecsermons/
					import.field = graphic
					width = 32m
					height = 32m
				}
				imageLinkWrap = 1
				imageLinkWrap {
					enable = 1
					JSwindow = 1
					JSwindow.expand = 20,20
				}
			}

			description = TEXT
			description {
				parseFunc < tt_content.text.20.parseFunc
				field = description
			}

			webaddress1 = TEXT
			webaddress1.typolink.parameter.field = webaddress1

			webaddress2 = TEXT
			webaddress2.typolink.parameter.field = webaddress3

			webaddress3 = TEXT
			webaddress3.typolink.parameter.field = webaddress3


		}

		tx_wecsermons_series {

			title = TEXT
			title {
				wrap = |<br/>
				field = title
			}

			graphic = IMAGE
			graphic {
			wrap = |<br/>
				file {
					import = uploads/tx_wecsermons/
					import.field = graphic
					width = 128m
					height = 128m
				}
				imageLinkWrap = 1
				imageLinkWrap {
					enable = 1
					JSwindow = 1
					JSwindow.expand = 20,20
				}
			}

			description = TEXT
			description {
				parseFunc < tt_content.text.20.parseFunc
				field = description
			}

			scripture = TEXT
			scripture {
				wrap = |<br/>
				field = scripture
			}

			topics = TEXT
			topics {
				wrap = |<br/> 
			}

			startdate = TEXT
			startdate {
				strftime = %A,  %b. %d %Y
				wrap = |
				field = startdate
			}

			enddate = TEXT
			enddate {
				strftime = %A,  %b. %d %Y
				wrap = |<br/>
				field = enddate
			}

			season = TEXT
			season {
				wrap = <div class="tx-wecsermons-sermon-season">|</div>
			}

		}

		tx_wecsermons_speakers {

			# If typolink is set, then we use this configuration to generate the link for the ###SPEAKER_LINK### TYPO tag.
			# If typolink = 0, then we generate a link to the speaker's single view
			typolink = 0
			typolink {
				parameter.field = url
				extTarget = _blank
			}

			photo = IMAGE
			photo {
			wrap = |<br/>
				file {
					import = uploads/tx_wecsermons/
					import.field = photo
					width = 128m
					height = 128m
				}
				imageLinkWrap = 1
				imageLinkWrap {
					enable = 1
					JSwindow = 1
					JSwindow.expand = 20,20
				}
			}

			fullname = TEXT
			fullname {
				wrap = |
				field = fullname
			}

			firstname = TEXT
			firstname {
				wrap = |
				field = firstname
			}

			lastname = TEXT
			lastname {
				wrap = |
				field = lastname
			}

			url = TEXT
			url {
				wrap = |
				typolink = 1
				typolink {
					parameter.field = url
					extTarget = _blank
				}
				field = url
			}

			email = TEXT
			email {
				typolink = 1
				typolink.parameter.field = email
				wrap = |
				parseFunc < tt_content.text.20.parseFunc
				field = email

			}
		}

		tx_wecsermons_topics {

			title = TEXT
			title {
				wrap = |
				field = title
			}

			description = TEXT
			description {
				parseFunc < tt_content.text.20.parseFunc
				field = description
			}
		}

		tx_wecsermons_seasons {

			title = TEXT
			title {
				wrap = |
				field = title
			}
		}

	}

	# *****************
	# List View
	# *****************
	listView {

		# Start date filter, which is applied to the list omiting all dates previous to the date set
		startDate =

		# End date filter, applied to the list omiting all dates later than the date set
		endDate =

		# *****************
		# Browse Box Settings
		#
		# See http://typo3.org/fileadmin/typo3api-4.0.0/df/d32/classtslib__pibase.html#ba8eebaed52748cdf9acb31562295378
		# *****************

		# How many results to show on each page
		results_at_a_time = {$plugin.tx_wecsermons_pi1.listView.results_at_a_time}

		# Maximum number of pages that are shown in the page browser
		maxPages = {$plugin.tx_wecsermons_pi1.listView.maxPages}

		# Whether the active page is a clickable link or text only
		dontLinkActivePage =

		# A boolean switch if the two links named "<< First" and "LAST >>" will be shown and point to the first or last page.
		showFirstLast =

		# Defines where the current page is shown in the list of pages in the Pagebrowser. If this var is an integer it will be interpreted as position in the list of pages. If its value is the keyword "center" the current page will be shown in the middle of the pagelist.
		pagefloat =

		# A boolean swith that displays the pagelinks in ranges f.e.: 1-5 6-10 11-15... instead of 1 2 3...
		showRange =

	 	# An integer switch that determines how the results browser will be rendered
		#
		# 1: (default) the text "Displaying results..." and the result-browser will be rendered.
		# 2: only the text "Displaying results..." will be shown
		showResultCount = 1

		# *******************
		# Browse Box Link Wraps
		# *******************
		browseBox_linkWraps {

			disabledLinkWrap = <td nowrap="nowrap"><p>|</p></td>
			inactiveLinkWrap = <td nowrap="nowrap"><p>|</p></td>
			activeLinkWrap = <td class="tx-wecsermons-pi1-browsebox-SCell" nowrap="nowrap"><p>|</p></td>
			browseLinksWrap = <table><tr>|</tr></table>
			showResultsWrap = <p>|</p>
			browseBoxWrap (
				<!--
				List browsing box:
				-->
				<div class="tx-wecsermons-pi1-browsebox">|</div>
			)
		}

			# A string value appended to the CSS class name of odd rows of a list, [tx-wecsermons-pi1-{alternatingClass}]
		alternatingClass = {$plugin.tx_wecsermons_pi1.listView.alternatingClass}

			# General formatting of a date in list view
		general_dateWrap {
			strftime = %A,  %b. %d %Y
		}

		# Table that records will be shown from
		detail_table = tx_wecsermons_sermons

		# Table that records in detail will be grouped by
		group_table =

		tx_wecsermons_sermons {

			# Allowed data columns to search in
			searchFieldList = title,description,scripture,keywords

			orderByList = occurance_date,title,description
			orderBy = occurance_date
			descFlag = 1

			# Wrap for the title column
			title = TEXT
			title {
				wrap = |<br/>
#				parseFunc < tt_content.text.20.parseFunc
				field = title
			}

			# Specific date wrap for the occurance_date column in tx_wecsermons_sermons table
			occurance_date = TEXT
			occurance_date {
				strftime = %A,  %b. %d %Y
				wrap = |<br/>
				field = occurance_date
			}

			description = TEXT
			description {
				crop = 75| &nbsp;...|1
				stripHtml = 1
				trim = 1
				wrap = <p class='bodytext'>|</p>
				field = description
			}

			scripture = TEXT
			scripture {
				wrap = |<br/>
				field = scripture
			}

			topics = TEXT
			topics {
				wrap = <div class="tx-wecsermons-topics">|</div>
			}

			series = TEXT
			series {
				wrap = <div class="tx-wecsermons-series">|</div>
			}

			graphic = IMAGE
			graphic {
			wrap = |<br/>
				file {
					import = uploads/tx_wecsermons/
					import.field = graphic
					width = 128m
					height = 128m
				}
				imageLinkWrap = 1
				imageLinkWrap {
					enable = 1
					JSwindow = 1
					JSwindow.expand = 20,20
				}
			}

			speakers = TEXT
			speakers {
				wrap = <div class="tx-wecsermons-speakers">|</div>

			}

		}

		tx_wecsermons_resources {

			# If typolink = 0, then links to the single view of a resource.
			typolink = 0
			typolink {
				parameter = uploads/tx_wecsermons/{current:1}
				parameter.setCurrent.field = file
				parameter.setCurrent.listNum = 0
				parameter.insertData = 1
				extTarget = _blank
			}

			# resource_types properties define whether to render the ###RESOURCE_LINK### tag as a link to the resources' single view, or by a typolink configuration.
			# See the TSRef for details on the typolink data type: http://typo3.org/documentation/document-library/references/doc_core_tsref/current/view/5/8/
			resource_types {

				PDF.typolink < plugin.tx_wecsermons_pi1.listView.tx_wecsermons_resources.typolink

				DOC.typolink < plugin.tx_wecsermons_pi1.listView.tx_wecsermons_resources.typolink

				MP3.typolink < plugin.tx_wecsermons_pi1.listView.tx_wecsermons_resources.typolink
				
				discussion.typolink < plugin.tx_wecsermons_pi1.listView.tx_wecsermons_resources.typolink

				# Default resource type.
				default.typolink < plugin.tx_wecsermons_pi1.listView.tx_wecsermons_resources.typolink

			}

			# Allowed data columns to search in
			searchFieldList = title,description,scripture,keywords

			title = TEXT
			title.field = title

			graphic = IMAGE
			graphic {
				file {
					import = uploads/tx_wecsermons/
					import.field = graphic
					width = 64m
					height = 64m
				}
				imageLinkWrap = 1
				imageLinkWrap {
					enable = 1
					JSwindow = 1
					JSwindow.expand = 20,20
				}

			}
			
			description = TEXT
			description {
				field = description
				crop = 150| &nbsp;...|1
				stripHtml = 1
				trim = 1
				wrap = <p class="bodytext">|</p>
			}


			webaddress1 = TEXT
			webaddress1.typolink.parameter.field = webaddress1

			webaddress2 = TEXT
			webaddress2.typolink.parameter.field = webaddress3

			webaddress3 = TEXT
			webaddress3.typolink.parameter.field = webaddress3

			file = TEXT
			file.field = file
			file.listNum = 0

		}

		tx_wecsermons_series {

			# Allowed data columns to search in
			searchFieldList = title,description,scripture,keywords

			title = TEXT
			title {
				wrap = |<br/>
				field = title
			}

			graphic = IMAGE
			graphic {
			wrap = |<br/>
				file {
					import = uploads/tx_wecsermons/
					import.field = graphic
					width = 64m
					height = 64m
				}
				imageLinkWrap = 1
				imageLinkWrap {
					enable = 1
					JSwindow = 1
					JSwindow.expand = 20,20
				}
			}


			description = TEXT
			description {
				crop = 150| &nbsp;...|1
				field = description
				stripHtml = 1
				trim = 1
				wrap = <p class="bodytext">|</p>
			}

			scripture = TEXT
			scripture {
				wrap = |<br/>
				field = scripture
			}

			topics = TEXT
			topics {
				wrap = |<br/>
			}

			startdate = TEXT
			startdate {
				strftime = %A,  %b. %d %Y
				wrap = |<br/>
				field = startdate
			}

			enddate = TEXT
			enddate {
				strftime = %A,  %b. %d %Y
				wrap = |<br/>
				field = enddate
			}

			season = TEXT
			season {
				wrap = |<br/>

			}

		}

		tx_wecsermons_speakers {

			# If typolink is set, then we use this configuration to generate the link for the ###SPEAKER_LINK### TYPO tag.
			# If typolink = 0, then we generate a link to the speaker's single view
			typolink = 0
			typolink {
				parameter.field = url
				extTarget = _blank
			}

			# Allowed data columns to search in
			searchFieldList = title,description,scripture,keywords

			photo = IMAGE
			photo {
			wrap = |<br/>
				file {
					import = uploads/tx_wecsermons/
					import.field = photo
					width = 64m
					height = 64m
				}
				imageLinkWrap = 1
				imageLinkWrap {
					enable = 1
					JSwindow = 1
					JSwindow.expand = 20,20
				}
			}

			firstname = TEXT
			firstname {
				wrap = |
				field = firstname
			}

			lastname = TEXT
			lastname {
				wrap = |
				field = lastname
			}

			url = TEXT
			url {
				typolink.parameter.field = url
				wrap = |<br/>
				value = |
				field = url
			}

			email = TEXT
			email {
				typolink = 1
				typolink.parameter.field = email
				wrap = |<br/>
				field = email
			}

		}

		tx_wecsermons_topics {

			title = TEXT
			title {
				wrap = |<br/>
				field = title
			}

			description = TEXT
			description {
				crop = 75| &nbsp;...|1
				field = description
				stripHtml = 1
				trim = 1
				wrap = <p class="bodytext">|</p>
			}

		}

		tx_wecsermons_seasons {

			title = TEXT
			title {
				wrap = |
				field = title
			}
		}

	}

	searchView {

		# Allowed data columns to search in
		searchFieldList = title,description,scripture,keywords

		orderByList = occurance_date,title
		orderBy = occurance_date,title
		descFlag = 0

		#	List of table names we can search into from the search box (Future use)
		#searchTables = tx_wecsermons_sermons,tx_wecsermons_series,tx_wecsermons_speakers,tx_wecsermons_seasons,tx_wecsermons_resources,tx_wecsermons_topics

		searchFieldArray {

			tx_wecsermons_sermons.searchFieldList = title,description,scripture,keywords

		}

		# Error generated if piVars['sword'] is not set
		searchError = searchView() was called, but no sword value was found!
		searchError.wrap = <h1>|</h1>

		searchBoxOptions  = TEXT
		searchBoxOptions {
				wrap =
		}

		searchButtonName = TEXT
		searchButtonName {
			typolink =
		}
	}

	xmlView {

		results_at_a_time = 5
		desc_flag = 1

		# TODO: allow multiple resource types here
		# TOTO: change to name of resource type specified in v.0.5.2 of extension
		#	EnclosureType specifies which custom resource type will be included as an <enclosure/> for podcasting.
		enclosureType = 2

			# Type tells the plugin how to render the ###RESOURCE_LINK### tag for a resource.
			# If typolink = 0, then links to the single view of a resource.
			resource_types {

				# Default resource type. **MUST** be configured by administrator
				0 {
					typolink = 0

				}

				PDF {
					typolink = 0
				}

				MP3 {
					typolink = 0
				}


			}
	}
}

# Empty default set CSS styles (these go into the document header):
plugin.tx_wecsermons_pi1._CSS_DEFAULT_STYLE >
plugin.tx_wecsermons_pi1._CSS_DEFAULT_STYLE (
/*------------------------------- WEC SMS -------------------------------------------*/

div.tx-wecsermons-pi1-list1 { margin: 1em 0 1em; padding: 0 0 1em;}
#tx-wecsermons-pi1-list2 th { background-color: #779976; text-align: left;}
#tx-wecsermons-pi1-list2 a { color: #003399; }
#tx-wecsermons-pi1-list2 td { background-color: #ACCCAB;}
div.tx-wecsermons-sermon-description { text-align: justify; }
div.tx-wecsermons-pi1-default dl {  margin-top: 0px; margin-bottom: 1em;}
div.tx-wecsermons-pi1-flv div.tx-wecflashplayer-pi1 { float: left; }

.tx-wecsermons-pi1-example p { border-bottom: 1px dashed #FFB5B5; }
#tx-wecsermons-pi1-series-example { background-color: #C9FFC9; padding: .5em; }
#tx-wecsermons-pi1-speakers-example { background-color: #FFBDBD; padding: .5em; }
#tx-wecsermons-pi1-mp3-example { background-color: #FFFFBF; padding: .5em; }
)
# Example of how to overrule LOCAL_LANG values for the plugin:
plugin.tx_wecsermons_pi1._LOCAL_LANG.default  {

	pi_list_searchBox_search = Search!
	tx_wecsermons.pi_flexform.layout.I.0 = Slezak
}
# Example of how to set default values from TS in the incoming array, $this->piVars of the plugin:
#plugin.tx_wecsermons_pi1._DEFAULT_PI_VARS.test = test
