plugin.tx_wecsermons_pi1 {

	userFunc = tx_wecsermons_pi1->main
	useStoragePid	 = {$plugin.tx_wecsermons_pi1.useStoragePid}
	pidSingleView = {$plugin.tx_wecsermons_pi1.pidSingleView}
	
	# Whether the extension caches content or not
	allowCaching = {$plugin.tx_wecsermons_pi1.allowCaching}

	# Rendering of text items. re-use the RTE parseFunc configuration for normal content
	general_stdWrap {
		parseFunc < tt_content.text.20.parseFunc
	}
	
	# General wrap for dates in the wec_sermons extension
	general_dateWrap {
		strftime = %A,  %b. %d %Y
	}
	
		#	Marker based template file, which defines the view of 'list'
	templateFile = {$plugin.tx_wecsermons_pi1.file.templateFile}
	
	# 
	listView {

			# list of column names added to the order by SQL clause
		orderByList = startdate
		
			#	Which columns are generated by the list view
		pi_listFields = uid, title, description
		
			# CSV string of table and column names, which specifies the grouping. [tableName.columnName,]
		groupByList = tx_wecsermons_series.startdate, tx_wecsermons_sermons.occurance_date
		
			#	Error generated if groupByList is not set
		groupByError = The typoscript setup value [plugin.tx_wecsermons_pi1.listView.groupByList] was not set!
		groupByError.wrap = <h1>|<h1>
		
			#	How many results to show on each page
		results_at_a_time = {$plugin.tx_wecsermons_pi1.listView.results_at_a_time}
		
			# Maximum number of pages that are shown in the page browser
		maxPages = {$plugin.tx_wecsermons_pi1.listView.maxPages}
		
			#	A string value appended to the CSS class name of odd rows of a list, [tx-wecsermons-pi1-{alternatingClass}]
		alternatingClass = {$plugin.tx_wecsermons_pi1.listView.alternatingClass}

			# General formatting of a date in list view
		general_dateWrap {
			strftime = %A,  %b. %d %Y
		}
		
			# Table that records will be shown from
		table_to_list = tx_wecsermons_sermons
		
			# List of tables that a list view can be generated from
		allowedTables = tx_wecsermons_sermons, tx_wecsermons_series, tx_wecsermons_resources, tx_wecsermons_topics, tx_wecsermons_liturgical_season
		
		sermons {

				#	Wrap for the title column
			title_stdWrap {
				wrap = |<br/>
				parseFunc < tt_content.text.20.parseFunc
			}
			
				#	Specific date wrap for the occurance_date column in tx_wecsermons_sermons table
			occurance_stdWrap {
				strftime = %A,  %b. %d %Y
				wrap = |<br/>
			}
			
			description_stdWrap {
				crop = 150|...
				parseFunc < tt_content.text.20.parseFunc
			}

			scripture_stdWrap {
				wrap = |<br/>
			}

			topics_stdWrap {
				wrap = <div class="tx-wecsermons-topics">|</div>
			}
			
			series_stdWrap {
				wrap = <div class="tx-wecsermons-series">|</div>
			}
			
			resources_stdWrap {
				wrap = <div class="tx-wecsermons-resources">|</div>
			}
			
			
			graphic_IMAGE {
				wrap = |<br/>
			}

			speakers_stdWrap {
				wrap = <div class="tx-wecsermons-speakers">|</div>

			}
				
		}
		
		resources {
		
			title_stdWrap {
				wrap = |<br/>
			}
			
			graphic_IMAGE {
				wrap = |<br/>
			}

			description_stdWrap {
				crop = 150|...
				parseFunc < tt_content.text.20.parseFunc
			}
	
		}
		
		series {
		
			title_stdWrap {
				wrap = |<br/>
			}
			
			graphic_IMAGE {
				wrap = |<br/>
			}

			description_stdWrap {
				crop = 150|...
				parseFunc < tt_content.text.20.parseFunc
			}
	
			scripture_stdWrap {
				wrap = |<br/>
			}

			topics_stdWrap {
				wrap = |<br/>
				parseFunc < tt_content.text.20.parseFunc
			}

			startdate_stdWrap {
				strftime = %A,  %b. %d %Y
				wrap = |<br/>
			}

			enddate_stdWrap {
				strftime = %A,  %b. %d %Y
				wrap = |<br/>
			}
		
		}
		
		speakers {
		
			photo_IMAGE {
				wrap = |
				border = 1
				file {
					width = 64m
					height = 64m
				}
				imageLinkWrap = 1
				imageLinkWrap {
					enable = 1
					JSwindow = 1
					JSwindow.expand = 20,20
				}
			}

			firstname_stdWrap {
				wrap = |
			}
			
			lastname_stdWrap {
				wrap = |
			}

			url_stdWrap {
				wrap = |<br/>
			}

			email_stdWrap {
				wrap = |<br/>
			}

		}
		
		topics {
			
			title_stdWrap {
				wrap = |<br/>
			}
			
			description_stdWrap {
				crop = 150|...
				parseFunc < tt_content.text.20.parseFunc
			}

		}

	}
	
	searchView {
		searchFieldList = title,description,related_scripture,keywords
		orderByList = uid,title,related_scripture,keywords
		
		#	Error generated if piVars['sword'] is not set
		searchError = searchView() was called, but no sword value was found!
		searchError.wrap = <h1>|</h1>
	}
}